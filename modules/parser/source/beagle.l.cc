#line 2 "/media/dados/projetos/beagle/modules/parser/source/beagle.l.cc"

#line 4 "/media/dados/projetos/beagle/modules/parser/source/beagle.l.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE beagle_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via beagle_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void beagle_restart (FILE *input_file ,yyscan_t yyscanner );
void beagle__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE beagle__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void beagle__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void beagle__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void beagle_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void beagle_pop_buffer_state (yyscan_t yyscanner );

static void beagle_ensure_buffer_stack (yyscan_t yyscanner );
static void beagle__load_buffer_state (yyscan_t yyscanner );
static void beagle__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER beagle__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE beagle__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE beagle__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE beagle__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *beagle_alloc (yy_size_t ,yyscan_t yyscanner );
void *beagle_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void beagle_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer beagle__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        beagle_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            beagle__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        beagle_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            beagle__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */

#define beagle_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 119
#define YY_END_OF_BUFFER 120
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[648] =
    {   0,
        0,    0,    0,    0,  120,   10,   12,  118,   14,   15,
      108,  118,   91,   88,  118,   74,   75,   86,   84,  105,
       85,  106,   87,  113,  113,  111,  104,   69,  107,   68,
      110,  112,  117,   76,  118,   77,   90,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,   78,   89,   79,  109,    5,    5,    5,
        5,    7,    5,    5,    5,    5,    5,    5,    5,    6,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,   12,
       11,    0,    0,    0,   73,    0,  116,    0,  103,   80,
       98,    0,    0,   96,   82,   94,   83,   95,  114,    2,
        0,   97,  114,  113,    0,  114,    0,    0,  113,   92,
       71,   72,   70,   93,  117,    0,   13,  100,  117,  117,
      117,  117,  117,  117,  117,  117,   35,  117,  117,  117,
      117,  117,   43,  117,  117,   46,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   99,   81,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    4,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    0,    0,
        0,  115,    0,    0,  114,    0,    0,    9,  114,    0,
        0,  114,  113,  101,  102,   13,   13,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,   42,  117,   27,  117,  117,   49,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,   66,  117,
      117,  117,  117,  117,    5,    5,    5,    5,    5,    5,
        4,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    0,
        8,    0,    0,    0,    0,    0,  114,    0,  114,  114,
      117,   17,  117,   30,  117,   29,  117,  117,  117,  117,
      117,   37,  117,  117,  117,  117,  117,  117,  117,  117,

       19,  117,   28,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   58,  117,  117,  117,  117,   61,  117,  117,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        0,    0,    0,  117,   18,   31,   32,   33,  117,  117,
      117,  117,   39,   41,  117,  117,   20,   21,   22,  117,
      117,  117,  117,  117,  117,  117,  117,   56,  117,   59,

      117,  117,  117,  117,   23,  117,  117,   63,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    0,    0,  117,  117,
      117,   36,  117,  117,  117,   45,  117,   48,  117,  117,
      117,   53,   54,   55,   57,   60,  117,   24,   25,   26,
       67,  117,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,  117,  117,

       34,   38,   40,  117,  117,   50,   51,  117,  117,  117,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   16,   64,  117,  117,  117,  117,   62,    5,
        5,    5,    5,    5,    5,    5,  117,   47,   52,   65,
        5,    5,    5,    5,   44,    5,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    2,    3,    3,    3,    3,    3,    3,    4,    5,
        3,    3,    6,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    7,    8,    3,    3,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   36,   36,   37,   38,   37,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   40,   39,   39,
       41,   42,   43,   44,   39,    3,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   39,   54,   55,   56,   57,
       58,   59,   39,   60,   61,   62,   63,   64,   65,   66,
       67,   39,   68,   69,   70,   71,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    1,    1,    2,    3,    1,    4,    1,    1,
        5,    1,    1,    6,    7,    1,    7,    8,    1,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    1,    1,
        1,    1,    1,    1,    1,   10,   11,   11,   12,   13,
        1,    4,    1,    1,   10,   14,   10,   10,   11,   14,
       12,   12,   12,   12,   12,   12,   13,   12,   12,   13,
       12,   13,   13,   12,   12,   13,   12,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[679] =
    {   0,
        0,    0,   71,    0, 1396, 1519,  139, 1519,  141, 1519,
     1359,  138, 1340,  137, 1329, 1519, 1519, 1338,  133, 1519,
      132,  150,  136,  163,  161, 1519, 1519,  120, 1337,  121,
     1519, 1519,    0, 1519,  152, 1519, 1336, 1321,  101,  150,
      148,  127,  156,  163, 1308,  117,  162, 1312,  153,  144,
     1307,  172, 1307, 1519,  162, 1519, 1519,    0,  222,    0,
      217, 1519, 1326,  226, 1325,  213,  232,    0,    0,  216,
      218,    0,  220,  233,  230,  257,  304,    0,    0,  232,
     1324,  233,    0,    0,  370,    0,  265,    0, 1323, 1294,
      184,  241,  218,  173,  234,  248, 1268,  118,  228, 1267,

      238,  250, 1259,  262, 1251,    0,  239,    0,    0,  314,
     1519,  297,  317,  298, 1519,  305, 1519,  274, 1519, 1519,
     1519, 1280,  275, 1519, 1519, 1519, 1519, 1519,  297, 1519,
     1284, 1519,  305,  282,  424, 1519,  334,    0,  426, 1256,
     1519, 1519, 1519, 1243,    0,  348,  353, 1519, 1213, 1208,
     1216,  297, 1219, 1218, 1205, 1211, 1194, 1195, 1193, 1197,
     1195, 1192,    0, 1192, 1173,    0, 1177, 1171, 1167, 1184,
      292, 1184, 1164, 1180, 1165, 1170,  303,  294, 1165, 1161,
      307, 1167, 1519, 1519,    0,  441, 1185,  365, 1184,    0,
      441,    0,  476,    0,    0,    0, 1191,  535,  360,    0,

        0,    0,    0,  582,  361,    0,  612,  403,  468,    0,
      647,  656,  687, 1169,    0,    0,    0, 1168,    0,  363,
        0, 1138, 1137, 1145,  389, 1148, 1147, 1134, 1140, 1126,
     1117, 1115, 1119, 1117, 1114,    0, 1114, 1110,    0, 1114,
     1098, 1094, 1111,  395, 1111, 1094, 1110, 1095, 1100,  399,
      409, 1080, 1076,  403, 1082,    0,    0, 1519, 1129,    0,
        0, 1519,    0,    0, 1519,  450, 1128, 1519,  433,  451,
      475,  527,    0, 1519, 1519, 1128, 1124, 1065, 1071, 1080,
     1075, 1076, 1062, 1045,  416, 1042, 1058, 1054, 1053, 1056,
     1052,    0,  449,  488, 1045, 1042,    0, 1040, 1029, 1030,

     1036, 1018, 1018, 1030, 1016, 1016, 1018, 1018,    0, 1012,
     1021, 1017, 1019, 1008,  467,  734,  765,    0,  796,  827,
      475, 1519,    0,  863,  505,  872,  907,  545,  696,    0,
        0,    0, 1000, 1006, 1012, 1007, 1008,  994,  992,  424,
      989, 1005,  986,  985,  987,  986,    0,  462,  535,  979,
      973,    0,  971,  960,  961,  967,  958,  958,  961,  947,
      947,  949,  949,    0,  942,  958,  954,  956,  945,  993,
     1519,  928,    0,  984,    0,  601,  714,  631,  959, 1519,
      934,    0,  939,    0,  940,    0,  930,  928,  936,  943,
      917,    0,  914,  914,  906,  918,  903,  936,  939,  936,

        0,  899,    0,  894,  912,  902,  897,  873,  865,  870,
      860,  861,    0,  842,  845,  502,  845,    0,  842,  854,
      507,  991, 1022, 1062, 1093,  891, 1124,  917, 1142,    0,
      842,    0,  847,    0,  830,    0,  820,  817,  818,  825,
      814,    0,  811,  812,  804,  813,  801,  834,  837,  834,
        0,  797,    0,  792,  795,  794,  789,  784,  776,  782,
      771,  783,    0,  764,  767,  553,  767,    0,  764,  776,
      498,    0,    0,  764,    0,    0,    0,    0,  751,  752,
      757,  757,  749,    0,  744,  737,    0,    0,    0,  748,
      748,  745,  733,  747,  731,  720,  729,    0,  723,  713,

      720,  743,  746,  743,    0,  715,  712,    0,  683, 1160,
     1191,  719,    0,    0,    0,    0,  706,  697,  701,  701,
      693,    0,  691,  684,    0,    0,    0,  695,  695,  692,
      670,  684,  683,  672,  681,    0,  674,  639,  646,  672,
      674,  671,    0,  639,  635,    0,    0,  676,  639,  622,
      604,    0,  604,  596,  611,    0,  603,    0,  598,  597,
      583,    0,    0,    0,    0,    0,  595,    0,    0,    0,
        0,  588, 1222,  631,  594,  567,  556,    0,  556,  549,
      566,    0,  569,    0,  564,  563,  549,    0,    0,    0,
        0,    0,  551,    0,    0,    0,    0,  544,  534,  545,

        0,    0,    0,  533,  536,    0,    0,  533,  521,  514,
      498,  496,    0,    0,    0,  487,  494,    0,    0,  486,
      474,  478,    0,    0,  462,  464,  457,  412,    0,    0,
        0,  395,  241,  224,  189,    0,  186,    0,    0,    0,
      131,    0,    0,    0,    0,    0, 1519, 1272, 1286, 1293,
     1296, 1310, 1324, 1338, 1349, 1360,  521, 1374,  548, 1381,
      579, 1384, 1398, 1412, 1418, 1424, 1430, 1436,  580,  584,
     1450, 1464, 1470, 1480, 1486, 1492, 1498, 1504
    } ;

static yyconst flex_int16_t yy_def[679] =
    {   0,
      647,    1,  647,    3,  647,  647,  647,  647,  647,  647,
      647,  648,  647,  647,  649,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  650,  647,  647,  647,  647,  647,
      647,  647,  651,  647,  647,  647,  647,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  647,  647,  647,  647,  652,  652,  652,
      652,  647,  652,  653,  652,  652,  654,  652,  652,  647,
      652,  652,  652,  652,  652,  652,   76,  652,  652,  652,
      652,  652,  652,  652,  647,  652,  652,  652,  652,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,  652,  652,  652,  652,  647,
      647,  647,  647,  647,  647,  648,  647,  655,  647,  647,
      647,  647,  656,  647,  647,  647,  647,  647,  657,  647,
      658,  647,  659,   24,  660,  647,  661,  662,  650,  647,
      647,  647,  647,  647,  651,  647,  647,  647,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  647,  647,  652,  652,  652,  652,  652,  652,
      653,  652,  652,  652,  652,  652,  652,  652,  647,  652,

      652,  652,  652,  652,  663,  652,  652,   76,   76,  652,
      652,  652,   76,  652,  652,  652,  652,  652,   85,  652,
      652,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  652,  652,  647,  664,  665,
      666,  647,  667,  668,  647,  669,  658,  647,  659,  670,
      647,  647,  662,  647,  647,  647,  647,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  671,  652,  652,  652,  652,  652,
      647,  647,  652,  652,  663,  652,  652,  652,  652,  212,
      652,  652,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  664,
      647,  672,  673,  674,  675,  647,  647,  647,  647,  647,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      671,  653,  652,  652,  652,  652,  652,  652,  652,  652,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      672,  676,  677,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  653,  652,
      652,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  678,  674,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  652,  424,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,  651,  651,  651,  651,  651,  651,  651,   85,
       85,   85,   85,   85,   85,   85,  651,  651,  651,  651,
       85,   85,   85,   85,  651,   85,    0,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647
    } ;

static yyconst flex_int16_t yy_nxt[1591] =
    {   0,
        6,    7,    8,    9,   10,    8,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   33,   33,   33,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       33,   33,   44,   33,   45,   33,   46,   33,   47,   48,
       49,   50,   51,   52,   53,   33,   33,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   60,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   77,   77,   77,   77,   77,   77,   77,   78,

       79,   80,   81,   82,   83,   84,   85,   85,   85,   85,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   85,   85,   96,   85,   97,   85,   98,   85,   99,
      100,  101,  102,  103,  104,  105,   85,   85,  106,  107,
      108,  109,  110,  111,  113,  117,  120,  125,  127,  130,
      140,  141,  143,  144,  131,  146,  147,  112,  150,  114,
      151,  168,  241,  128,  126,  169,  242,  132,  121,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  133,  118,
      133,  158,  134,  134,  134,  134,  134,  134,  134,  135,
      135,  646,  159,  183,  152,  177,  156,  136,  137,  136,

      137,  153,  138,  178,  154,  157,  170,  155,  160,  137,
      161,  137,  163,  162,  174,  175,  180,  176,  164,  165,
      188,  171,  195,  166,  172,  186,  111,  231,  138,  181,
      184,  185,  200,  192,  199,  189,  202,  185,  232,  116,
      187,  223,  185,  224,  196,  122,  645,  124,  205,  201,
      644,  203,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  206,  214,  215,  217,  218,  229,  193,  220,  147,
      256,  643,  243,  198,  207,  230,  208,  208,  208,  208,
      208,  208,  208,  209,  209,  225,  233,  244,  234,  642,
      245,  235,  226,  210,  211,  227,  212,  236,  228,  247,

      248,  250,  249,  237,  238,  211,  253,  257,  239,  251,
      258,  130,  117,  260,  263,  259,  131,  110,  111,  254,
      113,  647,  212,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  112,  265,  266,  114,  261,  264,  308,  260,
      263,  136,  270,  185,  299,  266,  118,  647,  271,  300,
      271,  146,  147,  270,  276,  306,  277,  281,  282,  312,
      309,  313,  307,  321,  322,  268,  220,  147,  188,  185,
      185,  185,  185,  185,  267,  185,  185,  185,  185,  185,
      185,  185,  185,  189,  185,  185,  185,  185,  185,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  185,  185,

      185,  185,  185,  185,  185,  219,  219,  219,  219,  219,
      185,  185,  185,  185,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  185,  185,  185,
      185,  133,  185,  133,  186,  111,  185,  354,  192,  336,
      337,  361,  355,  363,  116,  367,  641,  368,  362,  187,
      136,  137,  136,  137,  376,  378,  376,  378,  185,  136,
      270,  371,  137,  640,  137,  364,  388,  389,  321,  322,
      370,  270,  193,  191,  438,  439,  191,  209,  209,  209,
      209,  209,  209,  209,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  396,  639,  117,  397,  185,  398,  268,
      399,  371,  638,  400,  401,  316,  446,  191,  267,  447,
      370,  191,  502,  637,  503,  191,  636,  504,  505,  129,
      635,  129,  191,  185,  634,  191,  402,  191,  317,  118,
      633,  316,  197,  632,  631,  197,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  448,  269,  449,  269,  630,
      450,  451,  629,  380,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  540,  319,  541,  197,  628,  542,  543,
      197,  627,  626,  452,  197,  272,  377,  272,  377,  625,
      379,  197,  379,  624,  197,  623,  197,  320,  622,  621,

      319,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      620,  619,  618,  617,  616,  615,  614,  613,  323,  324,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  612,
      324,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      611,  185,  610,  609,  608,  607,  606,  605,  210,  327,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  604,
      327,  328,  603,  328,  602,  601,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  600,  599,  647,  598,  185,  597,
      192,  330,  330,  330,  596,  595,  116,  594,  593,  592,

      330,  330,  330,  330,  330,  330,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  193,  591,  185,  590,  589,  588,
      587,  586,  430,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  585,  584,  583,  582,  581,  580,  579,  578,
      265,  577,  185,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  576,  575,  572,  571,  570,  569,  568,  422,
      422,  422,  567,  566,  565,  564,  563,  562,  422,  422,
      422,  422,  422,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  561,  560,  559,  558,  557,  556,  555,

      423,  423,  423,  554,  553,  552,  551,  550,  549,  423,
      423,  423,  423,  423,  423,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  546,  545,  544,  539,  538,  537,
      536,  424,  424,  424,  535,  534,  533,  532,  531,  530,
      424,  424,  424,  424,  424,  424,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  529,  528,  527,  526,  525,
      524,  523,  425,  425,  425,  522,  521,  520,  519,  518,
      517,  425,  425,  425,  425,  425,  425,  426,  516,  426,
      515,  514,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      513,  512,  508,  507,  506,  501,  500,  499,  210,  327,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  498,
      327,  428,  497,  428,  496,  495,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  117,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  494,  493,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  492,  491,  490,  489,
      488,  487,  486,  471,  471,  471,  485,  484,  483,  118,
      482,  481,  471,  471,  471,  471,  471,  471,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  480,  479,  478,
      477,  476,  475,  474,  262,  136,  185,  371,  192,  470,

      469,  468,  467,  466,  116,  465,  464,  463,  462,  461,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  460,
      459,  458,  457,  456,  455,  454,  509,  509,  509,  453,
      445,  444,  193,  443,  442,  509,  509,  509,  509,  509,
      509,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      441,  440,  437,  436,  435,  434,  433,  510,  510,  510,
      432,  431,  420,  419,  418,  417,  510,  510,  510,  510,
      510,  510,  318,  416,  415,  414,  413,  412,  411,  410,
      409,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      408,  407,  406,  405,  404,  403,  395,  197,  197,  197,

      394,  393,  392,  391,  390,  387,  197,  197,  197,  197,
      197,  197,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  386,  385,  384,  383,  382,  381,  277,  511,  511,
      511,  277,  268,  371,  369,  366,  365,  511,  511,  511,
      511,  511,  511,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  360,  359,  358,  357,  356,  353,  352,  351,
      323,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      350,  349,  348,  347,  346,  345,  344,  343,  210,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  342,  341,
      340,  339,  338,  335,  334,  573,  573,  573,  333,  332,

      331,  318,  205,  315,  573,  573,  573,  573,  573,  573,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  314,
      311,  310,  305,  304,  303,  302,  574,  574,  574,  301,
      298,  297,  296,  295,  294,  574,  574,  574,  574,  574,
      574,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      293,  292,  291,  290,  289,  288,  287,  191,  191,  191,
      286,  285,  284,  283,  280,  279,  191,  191,  191,  191,
      191,  191,  116,  278,  275,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  122,  274,  268,  122,
      262,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      139,  139,  255,  139,  145,  145,  145,  145,  145,  145,
      185,  252,  185,  185,  185,  246,  185,  185,  185,  185,
      185,  185,  185,  185,  191,  240,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  197,  222,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  116,  116,  221,  216,  194,  190,  182,  179,
      173,  116,  116,  122,  122,  167,  149,  148,  142,  124,
      123,  119,  122,  122,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  135,  135,
      115,  135,  273,  273,  273,  647,  647,  273,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  372,  372,  372,  647,
      647,  372,  373,  373,  373,  647,  647,  373,  374,  374,
      374,  647,  647,  374,  375,  375,  375,  647,  647,  375,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  116,  647,  647,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  472,  472,
      472,  647,  647,  472,  122,  647,  647,  647,  122,  122,
      122,  647,  647,  122,  473,  473,  473,  647,  647,  473,

      547,  547,  547,  647,  647,  547,  548,  548,  548,  647,
      647,  548,  116,  116,  116,  647,  647,  116,    5,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647
    } ;

static yyconst flex_int16_t yy_chk[1591] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    7,    7,    9,   12,   14,   19,   21,   23,
       28,   28,   30,   30,   23,   35,   35,    7,   39,    9,
       39,   46,   98,   21,   19,   46,   98,   23,   14,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   25,   12,
       24,   42,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  641,   42,   55,   40,   50,   41,   25,   25,   24,

       24,   40,   24,   50,   40,   41,   47,   40,   43,   25,
       43,   24,   44,   43,   49,   49,   52,   49,   44,   44,
       61,   47,   66,   44,   47,   59,   59,   94,   24,   52,
       55,   64,   71,   64,   70,   61,   73,   67,   94,   64,
       59,   91,   67,   91,   66,   67,  637,   70,   75,   71,
      635,   73,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   75,   80,   80,   82,   82,   93,   64,   87,   87,
      107,  634,   99,   67,   76,   93,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   92,   95,   99,   95,  633,
       99,   95,   92,   76,   76,   92,   76,   96,   92,  101,

      101,  102,  101,   96,   96,   76,  104,  107,   96,  102,
      112,  114,  116,  118,  123,  112,  114,  110,  110,  104,
      113,  134,   76,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  110,  129,  129,  113,  118,  123,  178,  118,
      123,  133,  133,   77,  171,  129,  116,  134,  137,  171,
      137,  146,  146,  133,  147,  177,  147,  152,  152,  181,
      178,  181,  177,  199,  199,  205,  220,  220,  188,   77,
       85,   85,   85,   85,  205,   85,   85,   85,   85,   85,
       85,   85,   85,  188,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  135,  208,  139,  186,  186,  191,  244,  191,  225,
      225,  250,  244,  251,  191,  254,  632,  254,  250,  186,
      135,  135,  139,  139,  266,  270,  266,  270,  208,  269,
      269,  315,  135,  628,  139,  251,  285,  285,  321,  321,
      315,  269,  191,  193,  340,  340,  193,  209,  209,  209,
      209,  209,  209,  209,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  293,  627,  471,  293,  209,  294,  325,
      294,  421,  626,  294,  294,  193,  348,  193,  325,  348,
      421,  193,  416,  625,  416,  193,  622,  416,  416,  657,
      621,  657,  193,  209,  620,  193,  294,  193,  193,  471,
      617,  193,  198,  616,  612,  198,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  349,  659,  349,  659,  611,
      349,  349,  610,  272,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  466,  198,  466,  198,  609,  466,  466,
      198,  608,  605,  349,  198,  661,  669,  661,  669,  604,
      670,  198,  670,  600,  198,  599,  198,  198,  598,  593,

      198,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      587,  586,  585,  583,  581,  580,  579,  577,  204,  204,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  576,
      204,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      575,  574,  572,  567,  561,  560,  559,  557,  207,  207,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  555,
      207,  211,  554,  211,  553,  551,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  550,  549,  548,  545,  509,  544,
      509,  212,  212,  212,  542,  541,  509,  540,  539,  538,

      212,  212,  212,  212,  212,  212,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  509,  537,  213,  535,  534,  533,
      532,  531,  329,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  530,  529,  528,  524,  523,  521,  520,  519,
      377,  518,  213,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  517,  512,  507,  506,  504,  503,  502,  316,
      316,  316,  501,  500,  499,  497,  496,  495,  316,  316,
      316,  316,  316,  316,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  494,  493,  492,  491,  490,  486,  485,

      317,  317,  317,  483,  482,  481,  480,  479,  474,  317,
      317,  317,  317,  317,  317,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  470,  469,  467,  465,  464,  462,
      461,  319,  319,  319,  460,  459,  458,  457,  456,  455,
      319,  319,  319,  319,  319,  319,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  454,  452,  450,  449,  448,
      447,  446,  320,  320,  320,  445,  444,  443,  441,  440,
      439,  320,  320,  320,  320,  320,  320,  324,  438,  324,
      437,  435,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      433,  431,  420,  419,  417,  415,  414,  412,  326,  326,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  411,
      326,  327,  410,  327,  409,  408,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  372,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  407,  406,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  405,  404,  402,  400,
      399,  398,  397,  372,  372,  372,  396,  395,  394,  372,
      393,  391,  372,  372,  372,  372,  372,  372,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  390,  389,  388,
      387,  385,  383,  381,  374,  379,  422,  370,  422,  369,

      368,  367,  366,  365,  422,  363,  362,  361,  360,  359,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  358,
      357,  356,  355,  354,  353,  351,  422,  422,  422,  350,
      346,  345,  422,  344,  343,  422,  422,  422,  422,  422,
      422,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      342,  341,  339,  338,  337,  336,  335,  423,  423,  423,
      334,  333,  314,  313,  312,  311,  423,  423,  423,  423,
      423,  423,  424,  310,  308,  307,  306,  305,  304,  303,
      302,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      301,  300,  299,  298,  296,  295,  291,  424,  424,  424,

      290,  289,  288,  287,  286,  284,  424,  424,  424,  424,
      424,  424,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  283,  282,  281,  280,  279,  278,  277,  425,  425,
      425,  276,  267,  259,  255,  253,  252,  425,  425,  425,
      425,  425,  425,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  249,  248,  247,  246,  245,  243,  242,  241,
      427,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      240,  238,  237,  235,  234,  233,  232,  231,  429,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  230,  229,
      228,  227,  226,  224,  223,  510,  510,  510,  222,  218,

      214,  197,  189,  187,  510,  510,  510,  510,  510,  510,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  182,
      180,  179,  176,  175,  174,  173,  511,  511,  511,  172,
      170,  169,  168,  167,  165,  511,  511,  511,  511,  511,
      511,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      164,  162,  161,  160,  159,  158,  157,  573,  573,  573,
      156,  155,  154,  153,  151,  150,  573,  573,  573,  573,
      573,  573,  648,  149,  144,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  649,  140,  131,  649,
      122,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      650,  650,  105,  650,  651,  651,  651,  651,  651,  651,
      652,  103,  652,  652,  652,  100,  652,  652,  652,  652,
      652,  652,  652,  652,  653,   97,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  654,   90,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  655,  655,   89,   81,   65,   63,   53,   51,
       48,  655,  655,  656,  656,   45,   38,   37,   29,   18,
       15,   13,  656,  656,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  660,  660,
       11,  660,  662,  662,  662,    5,    0,  662,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  665,  665,  665,    0,
        0,  665,  666,  666,  666,    0,    0,  666,  667,  667,
      667,    0,    0,  667,  668,  668,  668,    0,    0,  668,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  672,    0,    0,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  673,  673,
      673,    0,    0,  673,  674,    0,    0,    0,  674,  674,
      674,    0,    0,  674,  675,  675,  675,    0,    0,  675,

      676,  676,  676,    0,    0,  676,  677,  677,  677,    0,
        0,  677,  678,  678,  678,    0,    0,  678,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647
    } ;

static yyconst flex_int16_t yy_rule_linenum[119] =
    {   0,
      100,  104,  108,  116,  117,  118,  119,  121,  126,  133,
      142,  148,  223,  231,  232,  234,  235,  236,  238,  239,
      240,  241,  243,  244,  245,  246,  248,  249,  250,  252,
      253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
      263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
      273,  274,  275,  276,  278,  279,  280,  281,  282,  283,
      284,  285,  286,  287,  288,  289,  290,  292,  293,  294,
      295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
      305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
      316,  317,  318,  319,  320,  321,  322,  323,  324,  325,

      327,  328,  329,  331,  332,  333,  334,  335,  336,  337,
      338,  339,  341,  342,  343,  344,  345,  347
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
#line 4 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
#include <string>
#include <cstdio>
#include <sstream>
#include <fstream>
#include <iostream>
#include "beagle.y.hh"

static int currentIndentSize = 0;

static int stepSize = 0;

static bool isEmptyLine = true;

static const char *beagle_getTokenText( int tok, const char *text )
{
	switch (tok)
	{
		case TOK_INDENT:
			return "TOK_INDENT";
		case TOK_DEDENT:
			return "TOK_DEDENT";
		case TOK_EOL:
			return "<<EOL>>\n";
		default:
			return text;
	}
}

#define EMIT(tok)                                                    \
    do {                                                             \
        yylval->node = strdup(beagle_getTokenText((tok), yytext));    \
		isEmptyLine = ((tok) == TOK_EOL) | ((tok) == TOK_DEDENT);    \
		return (tok); } while (0)

/*
* We use the special character '\2' as begin of line marker.
*/
/*
HEXADECIMAL_EXPONENT    ["P"] (["+","-"])? (["0"-"9"])+
HEX_FP_LITERAL_1        0[xX]([0-9a-fA-F])+\.? HEXADECIMAL_EXPONENT ([F,D])?
HEX_FP_LITERAL_2        0[xX]([0-9a-fA-F])*\.[0-9,a-f,A-F]
HEXADECIMAL_FLOATING_POINT_LITERAL  ( HEX_FP_LITERAL_1 | HEX_FP_LITERAL_2 )+ HEXADECIMAL_EXPONENT (["F","D"])?
FLOATING_POINT_LITERAL  ( DECIMAL_FLOATING_POINT_LITERAL  | HEXADECIMAL_FLOATING_POINT_LITERAL ) */

#line 1156 "/media/dados/projetos/beagle/modules/parser/source/beagle.l.cc"

#define INITIAL 0
#define IN_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int beagle_lex_init (yyscan_t* scanner);

int beagle_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int beagle_lex_destroy (yyscan_t yyscanner );

int beagle_get_debug (yyscan_t yyscanner );

void beagle_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE beagle_get_extra (yyscan_t yyscanner );

void beagle_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *beagle_get_in (yyscan_t yyscanner );

void beagle_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *beagle_get_out (yyscan_t yyscanner );

void beagle_set_out  (FILE * out_str ,yyscan_t yyscanner );

int beagle_get_leng (yyscan_t yyscanner );

char *beagle_get_text (yyscan_t yyscanner );

int beagle_get_lineno (yyscan_t yyscanner );

void beagle_set_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * beagle_get_lval (yyscan_t yyscanner );

void beagle_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int beagle_wrap (yyscan_t yyscanner );
#else
extern int beagle_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int beagle_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int beagle_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 97 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"



#line 1464 "/media/dados/projetos/beagle/modules/parser/source/beagle.l.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			beagle_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				beagle__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		beagle__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 648 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 647 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 119 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 119 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 120 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 100 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
	BEGIN(IN_COMMENT);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 104 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
	BEGIN(IN_COMMENT);
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 108 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{

	if (!isEmptyLine)
		unput('\n');
	else
		yylineno++;
	BEGIN(INITIAL);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 116 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 117 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ /* eat comment in chunks */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 118 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ /* eat the lone star */ }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 119 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ yylineno++; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 121 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
	// discards everything
	yylineno++;
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 126 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
	// discard the comments, but keeps the
	// end of line in the stream
	unput('\n');
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 133 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
									//std::cerr << "====== " << currentIndentSize << " -> " << currentIndentSize - stepSize << " (step is " << stepSize << ")" << std::endl;
									currentIndentSize -= stepSize;
									EMIT(TOK_DEDENT);
								}
	YY_BREAK
/*
  * Lines with only white spaces are empty lines
  */
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 142 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
									yylineno++;
									if (!isEmptyLine)
										EMIT(TOK_EOL);
                                }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
                                    if (isEmptyLine)
                                    {
										// use the match (length-1) as new identation size
										int indent = 0;
										for (int i = 1; i < strlen(yytext); ++i)
										{
											if (yytext[i] == '\t')
												indent += 4;
											else
												++indent;
										}

										if (indent != currentIndentSize)
										{

											if (stepSize == 0)
											{
												// if we don't have a step, use the current
												// indentation size
												stepSize = indent;
											}

											//std::cerr << "====== " << currentIndentSize << " -> " << indent << " (step is " << stepSize << ")" << std::endl;

											// compute the difference between current and new indentantion
											int diff = indent - currentIndentSize;

											// valid indentations are an increment of stepSize (TOK_INDENT) or
											// a decrement of any multipe of stepSize (TOK_DEDENT)

											// check if we have a valid increment indentation
											if (diff == stepSize)
											{
												currentIndentSize += stepSize;
												EMIT(TOK_INDENT);
											}
											else
											if (diff < 0 && (abs(diff) % stepSize) == 0)
											{
												diff = abs(diff) / stepSize - 1;

												// insert a special character to emit the remaining TOK_DEDENT
												// later
												for (int i = 0; i < diff; ++i)
													unput('\1');

												currentIndentSize -= stepSize;
												EMIT(TOK_DEDENT);
											}

											// indentation changed, but is invalid
											std::cerr << "Error at line " << yylineno;
											YY_FATAL_ERROR(": inconsistent identation");
										}
									}
                                }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_COMMENT):
#line 206 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
									// close all remaining scopes
                                    if (currentIndentSize > 0)
                                    {
										int count = currentIndentSize / stepSize;
										// if we have more than one remaining scope, insert
										// the special character to close them later
										if (count > 1)
											for (int i = 0; i < count-1; ++i)
												unput('\1');
										currentIndentSize -= stepSize;
										EMIT(TOK_DEDENT);
                                    }
                                    else
										yyterminate();
							   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 223 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{
                                    /*
                                     * Ignore the EOL and remaining white spaces after
                                     * the slash, merging the current and next lines.
                                     */
                                     yylineno++;
                                }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 231 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ /* just ignore remaining white spaces */ }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 232 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ yylineno++; EMIT(TOK_EOL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 234 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_ABSTRACT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 235 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_BOOLEAN); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 236 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_BREAK); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 238 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INT8); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 239 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INT16); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 240 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INT32); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 241 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INT64); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 243 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_UINT8); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 244 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_UINT16); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 245 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_UINT32); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 246 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_UINT64); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 248 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INT); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 249 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_LONG); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 250 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CHAR); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 252 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CASE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 253 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CATCH); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 254 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CLASS); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 255 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CONST); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 256 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_DEFAULT); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 257 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_DO); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 258 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_DOUBLE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 259 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_ELSE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 260 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_EXTENDS); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 261 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_FINAL); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 262 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_FINALLY); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 263 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_FLOAT); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 264 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_FOR); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 265 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_IF); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 266 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_IMPLEMENTS); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 267 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_IMPORT); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 268 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INSTANCEOF); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 269 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INTERFACE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 270 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_NATIVE); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 271 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_NEW); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 272 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_PACKAGE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 273 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_PRIVATE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 274 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_PROTECTED); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 275 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_PUBLIC); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 276 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_RETURN); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 278 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_STATIC); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 279 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_SUPER); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 280 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_SWITCH); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 281 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_THIS); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 282 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_THROW); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 283 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_THROWS); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 284 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_VOID); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 285 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_VOLATILE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 286 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_WHILE); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 287 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CONTINUE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 288 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_TRANSIENT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 289 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_TRY); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 290 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_VARARG); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 292 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_GT); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 293 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_LT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 294 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_GE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 295 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_LE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 296 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_EQ); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 297 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_NE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 298 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_LP); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 299 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_RP); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 300 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_LB); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 301 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_RB); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 302 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_LC); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 303 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_RC); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 304 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_ANDAND); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 305 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_OROR); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 306 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INC); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 307 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_DEC); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 308 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_PLUS); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 309 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_MINUS); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 310 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_MUL); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 311 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_DIV); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 312 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_AND); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 313 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_OR); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 314 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CARET); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 316 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_MOD); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 317 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_SHL); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 318 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_SHR); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 319 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_PLASN); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 320 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_MIASN); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 321 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_MUASN); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 322 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_DIASN); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 323 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_ANDASN); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 324 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_ORASN); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 325 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CARETASN); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 327 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_SLASN); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 328 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_SRASN); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 329 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_MODASN); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 331 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_SM); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 332 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CM); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 333 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_DOT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 334 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_ASN); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 335 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_BANG); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 336 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_TILDE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 337 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_QUEST); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 338 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_COLON); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 339 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_AT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 341 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_INTLITERAL); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 342 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_FLOATLITERAL); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 343 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_CHARLITERAL); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 344 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_STRINGLITERAL); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 345 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_IDENT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 347 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
{ EMIT(TOK_BAD_TOKEN); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 349 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
ECHO;
	YY_BREAK
#line 2289 "/media/dados/projetos/beagle/modules/parser/source/beagle.l.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * beagle_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( beagle_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of beagle_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					beagle_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			beagle_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) beagle_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 3);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 648 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 3;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 648 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 647);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					beagle_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( beagle_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void beagle_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        beagle_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            beagle__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	beagle__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	beagle__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void beagle__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		beagle_pop_buffer_state();
	 *		beagle_push_buffer_state(new_buffer);
     */
	beagle_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	beagle__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (beagle_wrap()) processing, but the only time this flag
	 * is looked at is after beagle_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void beagle__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE beagle__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) beagle_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in beagle__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) beagle_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in beagle__create_buffer()" );

	b->yy_is_our_buffer = 1;

	beagle__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with beagle__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void beagle__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		beagle_free((void *) b->yy_ch_buf ,yyscanner );

	beagle_free((void *) b ,yyscanner );
}

/* %if-c-only */

/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a beagle_restart() or at EOF.
 */
/* %if-c-only */
    static void beagle__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	beagle__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then beagle__init_buffer was _probably_
     * called from beagle_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void beagle__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		beagle__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void beagle_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	beagle_ensure_buffer_stack(yyscanner);

	/* This block is copied from beagle__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from beagle__switch_to_buffer. */
	beagle__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void beagle_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	beagle__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		beagle__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void beagle_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)beagle_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in beagle_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)beagle_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in beagle_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE beagle__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) beagle_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in beagle__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	beagle__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to beagle_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       beagle__scan_bytes() instead.
 */
YY_BUFFER_STATE beagle__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return beagle__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to beagle_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE beagle__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) beagle_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in beagle__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = beagle__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in beagle__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE beagle_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int beagle_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int beagle_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *beagle_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *beagle_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int beagle_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *beagle_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void beagle_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void beagle_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "beagle_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void beagle_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "beagle_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see beagle__switch_to_buffer
 */
void beagle_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void beagle_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int beagle_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void beagle_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * beagle_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void beagle_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* beagle_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int beagle_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) beagle_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* beagle_lex_init_extra has the same functionality as beagle_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to beagle_alloc in
 * the yyextra field.
 */

int beagle_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    beagle_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) beagle_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    beagle_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from beagle_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * beagle_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* beagle_lex_destroy is for both reentrant and non-reentrant scanners. */
int beagle_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		beagle__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		beagle_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	beagle_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        beagle_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * beagle_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    beagle_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *beagle_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *beagle_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void beagle_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see beagle_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 349 "/media/dados/projetos/beagle/modules/parser/source/beagle.l"
