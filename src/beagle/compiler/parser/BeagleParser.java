/* BeagleParser.java */
/* Generated By:JavaCC: Do not edit this line. BeagleParser.java */
package beagle.compiler.parser;

import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;

import beagle.compiler.ast.*;
import beagle.compiler.ast.body.*;
import beagle.compiler.ast.expression.*;
import beagle.compiler.ast.type.*;
import beagle.compiler.ast.statement.*;

public class BeagleParser extends AbstractParser implements BeagleParserConstants {

/*
 * Grammar for Beagle programming language
 */
  final public 

CompilationUnit CompilationUnit() throws ParseException {PackageDeclaration pkg = null;
    List<ImportDeclaration> imports = null;
    ImportDeclaration in = null;
    TypeDeclaration type = null;
    LineInfo linfo = new LineInfo();
    pkg = PackageDeclaration();
linfo.updateBegin(pkg);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      in = ImportDeclaration();
linfo.updateBegin(in);
            if (in != null && imports == null)
                imports = new ArrayList<ImportDeclaration>();
            imports.add(in);
    }
    type = TypeDeclaration();
linfo.update(type);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
      break;
      }
    case 122:{
      jj_consume_token(122);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new CompilationUnit(linfo, pkg, imports, type);}
    throw new Error("Missing return statement in function");
  }

  final public PackageDeclaration PackageDeclaration() throws ParseException {List<AnnotationExpr> annotations = null;
    AnnotationExpr ann;
    NameExpr name;
    LineInfo linfo = new LineInfo();
    PackageDeclaration pkg;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AT:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      ann = Annotation();
annotations = addAnnotation(annotations, ann);
    }
    jj_consume_token(PACKAGE);
linfo.updateBegin(token);
    name = Name();
    jj_consume_token(SEMICOLON);
linfo.updateEnd(token);
            {if ("" != null) return new PackageDeclaration(linfo, annotations, name);}
    throw new Error("Missing return statement in function");
  }

  final public ImportDeclaration ImportDeclaration() throws ParseException {NameExpr name;
    boolean isAsterisk = false;
    LineInfo linfo = new LineInfo();
    jj_consume_token(IMPORT);
linfo.updateBegin(token);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      jj_consume_token(MUL);
isAsterisk = true;
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
linfo.updateEnd(token);
            {if ("" != null) return new ImportDeclaration(linfo, name, isAsterisk);}
    throw new Error("Missing return statement in function");
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 *
 * TODO: separate "access modifiers" from "other modifiers"
 */
  final public ModifierDeclaration Modifiers() throws ParseException {int modifiers = 0;
    AnnotationExpr ann;
    LineInfo linfo = new LineInfo();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL:
      case CONST:
      case STATIC:
      case PUBLIC:
      case NATIVE:
      case EXPORT:
      case PRIVATE:
      case ABSTRACT:
      case READLOCK:
      case INTERNAL:
      case WRITELOCK:
      case PROTECTED:
      case SYNCHRONIZED:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL:{
        jj_consume_token(FINAL);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.FINAL);        linfo.updateBegin(token);
        break;
        }
      case CONST:{
        jj_consume_token(CONST);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.CONST);        linfo.updateBegin(token);
        break;
        }
      case NATIVE:{
        jj_consume_token(NATIVE);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.NATIVE);       linfo.updateBegin(token);
        break;
        }
      case PUBLIC:{
        jj_consume_token(PUBLIC);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.PUBLIC);       linfo.updateBegin(token);
        break;
        }
      case STATIC:{
        jj_consume_token(STATIC);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.STATIC);       linfo.updateBegin(token);
        break;
        }
      case EXPORT:{
        jj_consume_token(EXPORT);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.EXPORT);       linfo.updateBegin(token);
        break;
        }
      case PRIVATE:{
        jj_consume_token(PRIVATE);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.PRIVATE);      linfo.updateBegin(token);
        break;
        }
      case READLOCK:{
        jj_consume_token(READLOCK);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.READLOCK);     linfo.updateBegin(token);
        break;
        }
      case INTERNAL:{
        jj_consume_token(INTERNAL);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.INTERNAL);     linfo.updateBegin(token);
        break;
        }
      case ABSTRACT:{
        jj_consume_token(ABSTRACT);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.ABSTRACT);     linfo.updateBegin(token);
        break;
        }
      case PROTECTED:{
        jj_consume_token(PROTECTED);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.PROTECTED);    linfo.updateBegin(token);
        break;
        }
      case WRITELOCK:{
        jj_consume_token(WRITELOCK);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.WRITELOCK);    linfo.updateBegin(token);
        break;
        }
      case SYNCHRONIZED:{
        jj_consume_token(SYNCHRONIZED);
modifiers = ModifierSet.setModifier(modifiers, ModifierSet.SYNCHRONIZED); linfo.updateBegin(token);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new ModifierDeclaration(linfo, modifiers);}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration TypeDeclaration() throws ParseException {ModifierDeclaration modifier;
   TypeDeclaration typeDecl;
   List<AnnotationExpr> annotations;
    annotations = AnnotationList();
    /*
                 * Store annotations in somewhere!
                 */
            modifier = Modifiers();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLASS:
    case INTERFACE:{
      typeDecl = ClassOrInterfaceDeclaration(annotations, modifier);
      break;
      }
    case ENUM:{
      typeDecl = EnumDeclaration(annotations, modifier);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return typeDecl;}
    throw new Error("Missing return statement in function");
  }

  final public EnumDeclaration EnumDeclaration(List<AnnotationExpr> annotations, ModifierDeclaration modifier) throws ParseException {String name;
    List impList = new LinkedList();
    EnumConstantDeclaration entry;
    List entries = new LinkedList();
    BodyDeclaration member;
    List members = new LinkedList();
    LineInfo linfo = new LineInfo();
    jj_consume_token(ENUM);
linfo.updateBegin(token);
    jj_consume_token(IDENTIFIER);
name = token.image;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPLEMENTS:{
      impList = ImplementsList(false);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    BeginBlock();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AT:
    case IDENTIFIER:{
      entry = EnumConstantDeclaration();
entries.add(entry);
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        entry = EnumConstantDeclaration();
entries.add(entry);
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENUM:
        case FINAL:
        case CONST:
        case CLASS:
        case STATIC:
        case PUBLIC:
        case NATIVE:
        case EXPORT:
        case PRIVATE:
        case ABSTRACT:
        case READLOCK:
        case INTERNAL:
        case WRITELOCK:
        case PROTECTED:
        case INTERFACE:
        case SYNCHRONIZED:
        case AT:
        case VOID:
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case FIXED:
        case DOUBLE:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        member = ClassOrInterfaceBodyDeclaration(false);
members.add(member);
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    EndBlock();
linfo.updateEnd(token);
            {if ("" != null) return new EnumDeclaration(linfo,/*popJavadoc()*/null,
                annotations, modifier, name, impList, entries, members);}
    throw new Error("Missing return statement in function");
  }

  final public EnumConstantDeclaration EnumConstantDeclaration() throws ParseException {List annotations = new LinkedList();
    AnnotationExpr ann;
    String name;
    List args = null;
    //List classBody = null;
    LineInfo linfo = new LineInfo();

    annotations = AnnotationList();
    jj_consume_token(IDENTIFIER);
name = token.image;
            linfo.updateBegin(token);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      args = Arguments();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
linfo.updateEnd(token);
            {if ("" != null) return new EnumConstantDeclaration(linfo,/*popJavadoc()*/null,
                annotations, name, args);}
    throw new Error("Missing return statement in function");
  }

  final public List Arguments() throws ParseException {List ret = null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case BNEG:
    case ADD:
    case SUB:
    case INCR:
    case DECR:
    case LNEG:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      ret = ArgumentList();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ArgumentList() throws ParseException {List ret = new LinkedList();
    Expression expr;
    expr = Expression();
ret.add(expr);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      expr = Expression();
ret.add(expr);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(List<AnnotationExpr> annotations, ModifierDeclaration modifier) throws ParseException {boolean isInterface = false;
   String name;
   List typePar = null;
   List extList = null;
   List impList = null;
   List members = null;
   LineInfo linfo = new LineInfo(modifier, null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLASS:{
      jj_consume_token(CLASS);
      break;
      }
    case INTERFACE:{
      jj_consume_token(INTERFACE);
isInterface = true;
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
linfo.updateBegin(token);
    jj_consume_token(IDENTIFIER);
name = token.image;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      extList = ExtendsList(isInterface);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPLEMENTS:{
      impList = ImplementsList(isInterface);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    members = ClassOrInterfaceBody(isInterface);
linfo.updateEnd(token);
            {if ("" != null) return new ClassOrInterfaceDeclaration(linfo,/*popJavadoc()*/null, annotations, modifier,
                isInterface, name, extList, impList, members);}
    throw new Error("Missing return statement in function");
  }

  final public List ExtendsList(boolean isInterface) throws ParseException {boolean extendsMoreThanOne = false;
   List ret = new LinkedList();
   ClassOrInterfaceType cit;
    jj_consume_token(EXTENDS);
    cit = ClassOrInterfaceType();
ret.add(cit);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      cit = ClassOrInterfaceType();
ret.add(cit);
            extendsMoreThanOne = true;
    }
if (extendsMoreThanOne && !isInterface)
                {if (true) throw new NullPointerException(/*token,*/ "A class cannot extend more than one other class");}
            {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ImplementsList(boolean isInterface) throws ParseException {List ret = new LinkedList();
   ClassOrInterfaceType cit;
    jj_consume_token(IMPLEMENTS);
    cit = ClassOrInterfaceType();
ret.add(cit);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      cit = ClassOrInterfaceType();
ret.add(cit);
    }
if (isInterface)
                {if (true) throw new NullPointerException(/*token,*/ "An interface cannot implement other interfaces");}
            {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ClassOrInterfaceBody(boolean isInterface) throws ParseException {List ret = new LinkedList();
    BodyDeclaration member;
    BeginBlock();
    label_9:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_9;
      }
      member = ClassOrInterfaceBodyDeclaration(isInterface);
ret.add(member);
    }
    EndBlock();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public void BeginBlock() throws ParseException {
    jj_consume_token(LBRACE);
  }

  final public void EndBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RBRACE:{
      jj_consume_token(RBRACE);
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    case 122:{
      jj_consume_token(122);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public BodyDeclaration ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {boolean isNestedInterface = false;
   ModifierDeclaration modifier;
   BodyDeclaration ret = null;
   List annotations = null;
    annotations = AnnotationList();
    modifier = Modifiers();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLASS:
    case INTERFACE:{
      ret = ClassOrInterfaceDeclaration(annotations, modifier);
      break;
      }
    case ENUM:{
      ret = EnumDeclaration(annotations, modifier);
      break;
      }
    case AT:{
      ret = AnnotationTypeDeclaration(annotations, modifier);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_3(2147483647)) {
        ret = ConstructorDeclaration(annotations, modifier);
      } else if (jj_2_4(2147483647)) {
        ret = FieldDeclaration(annotations, modifier);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOID:
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case FIXED:
        case DOUBLE:
        case BOOLEAN:
        case IDENTIFIER:{
          ret = MethodDeclaration(annotations, modifier);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration(List<AnnotationExpr> annotations, ModifierDeclaration modifier) throws ParseException {List typeParameters = null;
    String name;
    List parameters;
    List throws_ = null;
    ExplicitConstructorInvocationStmt exConsInv = null;
    List stmts = new LinkedList();
    LineInfo lctor = new LineInfo();
    LineInfo linfo = new LineInfo();
    jj_consume_token(IDENTIFIER);
name = token.image;
            lctor.updateBegin(token);
    parameters = FormalParameters();
    BeginBlock();
linfo.updateBegin(token);
    if (jj_2_5(2147483647)) {
      exConsInv = ExplicitConstructorInvocation();
    } else if (jj_2_6(2147483647)) {
      exConsInv = ExplicitConstructorInvocation();
      stmts = StatementList();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case DO:
      case FOR:
      case TRY:
      case NEW:
      case PASS:
      case TRUE:
      case NULL:
      case THIS:
      case FALSE:
      case FINAL:
      case CONST:
      case SUPER:
      case WHILE:
      case BREAK:
      case THROW:
      case STATIC:
      case PUBLIC:
      case NATIVE:
      case EXPORT:
      case SWITCH:
      case RETURN:
      case ASSERT:
      case PRIVATE:
      case ABSTRACT:
      case READLOCK:
      case INTERNAL:
      case CONTINUE:
      case WRITELOCK:
      case PROTECTED:
      case SYNCHRONIZED:
      case LPAREN:
      case AT:
      case INCR:
      case DECR:
      case VOID:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        stmts = StatementList();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    EndBlock();
if (exConsInv != null)
                stmts.add(0, exConsInv);
            lctor.updateEnd(token);
            linfo.updateEnd(token);
            {if ("" != null) return new ConstructorDeclaration(lctor,/*popJavadoc()*/null,
                annotations, modifier, name, parameters,
                new BlockStmt(linfo, stmts));}
    throw new Error("Missing return statement in function");
  }

  final public ExplicitConstructorInvocationStmt ExplicitConstructorInvocation() throws ParseException {boolean isThis = false;
    List args;
    Expression expr = null;
    List typeArgs = null;
    LineInfo linfo = new LineInfo();
    if (jj_2_8(2147483647)) {
      jj_consume_token(THIS);
linfo.updateBegin(token);
                isThis = true;
      args = Arguments();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:
      case TRUE:
      case NULL:
      case THIS:
      case FALSE:
      case SUPER:
      case LPAREN:
      case VOID:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        if (jj_2_7(2147483647)) {
          expr = PrimaryExpressionWithoutSuperSuffix();
          jj_consume_token(DOT);
linfo.updateBegin(expr);
        } else {
          ;
        }
        jj_consume_token(SUPER);
linfo.updateBegin(token);
        args = Arguments();
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
linfo.updateEnd(token);
        {if ("" != null) return new ExplicitConstructorInvocationStmt(linfo, isThis, expr, args);}
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration FieldDeclaration(List<AnnotationExpr> annotations, ModifierDeclaration modifier) throws ParseException {Type type;
    List variables = new LinkedList();
    VariableDeclarator val;
    LineInfo linfo = new LineInfo(modifier, null);
    // Annotations and modifiers matched by caller
        type = Type();
    val = VariableDeclarator();
variables.add(val);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      val = VariableDeclarator();
variables.add(val);
    }
    jj_consume_token(SEMICOLON);
linfo.updateBegin(type);
            linfo.updateEnd(token);
            {if ("" != null) return new FieldDeclaration(linfo, /*popJavadoc()*/null, annotations, modifier, type, variables);}
    throw new Error("Missing return statement in function");
  }

/*
 * Unlike Java, Beagle variable/field declarations cannot replace the brackets in type
 * by brackets in the variable/field identifier (e.g. "int a[]" instead "int[] a" )
 */
  final public VariableDeclarator VariableDeclarator() throws ParseException {String name;
    Expression init = null;
    LineInfo linfo = new LineInfo();
    jj_consume_token(IDENTIFIER);
linfo.updateBegin(token);
            name = token.image;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      init = VariableInitializer();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
if (init != null)
                linfo.updateEnd(init);
            else
                linfo.updateEnd(token);
            {if ("" != null) return new  VariableDeclarator(linfo, name, init);}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public Type Type() throws ParseException {Type ret;
    if (jj_2_9(2)) {
      ret = ArrayType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:{
        ret = PrimitiveType();
        break;
        }
      case IDENTIFIER:{
        ret = ClassOrInterfaceType();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayType ArrayType() throws ParseException {Type type;
    int arrayCount = 0;
    LineInfo linfo = new LineInfo();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:{
      type = PrimitiveType();
      label_11:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
arrayCount++;
        if (jj_2_10(2)) {
          ;
        } else {
          break label_11;
        }
      }
      break;
      }
    case IDENTIFIER:{
      type = ClassOrInterfaceType();
      label_12:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
arrayCount++;
        if (jj_2_11(2)) {
          ;
        } else {
          break label_12;
        }
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
linfo.update(type);
            {if ("" != null) return new ArrayType(linfo, type, arrayCount);}
    throw new Error("Missing return statement in function");
  }

/*
 * We don't support generics yet.
 */
  final public ClassOrInterfaceType ClassOrInterfaceType() throws ParseException {ClassOrInterfaceType ret;
    jj_consume_token(IDENTIFIER);
ret = new ClassOrInterfaceType(new LineInfo(token), null, token.image);
    label_13:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
ret = new ClassOrInterfaceType(new LineInfo(token), ret, token.image);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType PrimitiveType() throws ParseException {PrimitiveType ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
ret = new PrimitiveType(new LineInfo(token), Primitive.Int);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
ret = new PrimitiveType(new LineInfo(token), Primitive.Char);
      break;
      }
    case BYTE:{
      jj_consume_token(BYTE);
ret = new PrimitiveType(new LineInfo(token), Primitive.Byte);
      break;
      }
    case LONG:{
      jj_consume_token(LONG);
ret = new PrimitiveType(new LineInfo(token), Primitive.Long);
      break;
      }
    case SHORT:{
      jj_consume_token(SHORT);
ret = new PrimitiveType(new LineInfo(token), Primitive.Short);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
ret = new PrimitiveType(new LineInfo(token), Primitive.Float);
      break;
      }
    case FIXED:{
      jj_consume_token(FIXED);
ret = new PrimitiveType(new LineInfo(token), Primitive.Fixed);
      break;
      }
    case DOUBLE:{
      jj_consume_token(DOUBLE);
ret = new PrimitiveType(new LineInfo(token), Primitive.Double);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
ret = new PrimitiveType(new LineInfo(token), Primitive.Boolean);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (ret == null) {if (true) throw new NullPointerException("Unhandled primitive type");}
            {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Type ResultType() throws ParseException {Type ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      jj_consume_token(VOID);
ret = new VoidType(new LineInfo(token));
      break;
      }
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case IDENTIFIER:{
      ret = Type();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/*
 * Full qualified names. A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
  final public NameExpr Name() throws ParseException {NameExpr ret;
    jj_consume_token(IDENTIFIER);
ret = new NameExpr(new LineInfo(token), token.image);
    label_14:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
LineInfo linfo = new LineInfo();
            linfo.updateBegin(ret);
            linfo.updateEnd(token);
            ret = new QualifiedNameExpr(linfo, ret, token.image);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List NameList() throws ParseException {List ret = new LinkedList();
    NameExpr name;
    name = Name();
ret.add(name);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      name = Name();
ret.add(name);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression VariableInitializer() throws ParseException {Expression ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      ret = ArrayInitializer();
      break;
      }
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case BNEG:
    case ADD:
    case SUB:
    case INCR:
    case DECR:
    case LNEG:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      ret = Expression();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializerExpr ArrayInitializer() throws ParseException {List values = new ArrayList();
    Expression val;
    LineInfo linfo = new LineInfo();
    jj_consume_token(LBRACKET);
linfo.updateBegin(token);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case LBRACKET:
    case BNEG:
    case ADD:
    case SUB:
    case INCR:
    case DECR:
    case LNEG:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      val = VariableInitializer();
values.add(val);
      label_16:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(COMMA);
        val = VariableInitializer();
values.add(val);
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
linfo.updateEnd(token);
            {if ("" != null) return new ArrayInitializerExpr(linfo, values);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration(List<AnnotationExpr> annotations, ModifierDeclaration modifier) throws ParseException {List typeParameters = null;
    Type type;
    String name;
    List parameters;
    int arrayCount = 0;
    List throws_ = null;
    BlockStmt block = null;
    LineInfo linfo = new LineInfo();
    // Annotations and modifiers matched by caller
        type = ResultType();
linfo.updateBegin(type);
    jj_consume_token(IDENTIFIER);
name = token.image;
    parameters = FormalParameters();
    /**
         * Unlike Java, Beagle don't support indicate an array return type using brackets
         * after argument list (e.g. "int values()[]" instead "int[] values()"
         */
        block = Block();
linfo.updateEnd(token);
            {if ("" != null) return new MethodDeclaration(linfo, /*popJavadoc()*/null,
                annotations, modifier, type, name, parameters, block);}
    throw new Error("Missing return statement in function");
  }

  final public List FormalParameters() throws ParseException {List ret = new ArrayList();
    Parameter par;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINAL:
    case CONST:
    case STATIC:
    case PUBLIC:
    case NATIVE:
    case EXPORT:
    case PRIVATE:
    case ABSTRACT:
    case READLOCK:
    case INTERNAL:
    case WRITELOCK:
    case PROTECTED:
    case SYNCHRONIZED:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case IDENTIFIER:{
      par = FormalParameter();
ret.add(par);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        par = FormalParameter();
ret.add(par);
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Parameter FormalParameter() throws ParseException {ModifierDeclaration modifier;
    Type type;
    boolean isVarArg = false;
    String name;
    LineInfo linfo = new LineInfo();
    modifier = Modifiers();
linfo.updateBegin(modifier);
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARARG:{
      jj_consume_token(VARARG);
isVarArg = true;
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
linfo.updateEnd(token);
            name = token.image;
            {if ("" != null) return new Parameter(linfo, modifier, type, isVarArg, name);}
    throw new Error("Missing return statement in function");
  }

  final public BlockStmt Block() throws ParseException {List stmts = new ArrayList();
    LineInfo linfo = new LineInfo();
    BeginBlock();
linfo.update(token);
    stmts = StatementList();
    EndBlock();
{if ("" != null) return new BlockStmt(linfo, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public List StatementList() throws ParseException {List ret = new LinkedList();
    Statement stmt;
    label_18:
    while (true) {
      stmt = GenericStatement();
ret.add(stmt);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case DO:
      case FOR:
      case TRY:
      case NEW:
      case PASS:
      case TRUE:
      case NULL:
      case THIS:
      case FALSE:
      case FINAL:
      case CONST:
      case SUPER:
      case WHILE:
      case BREAK:
      case THROW:
      case STATIC:
      case PUBLIC:
      case NATIVE:
      case EXPORT:
      case SWITCH:
      case RETURN:
      case ASSERT:
      case PRIVATE:
      case ABSTRACT:
      case READLOCK:
      case INTERNAL:
      case CONTINUE:
      case WRITELOCK:
      case PROTECTED:
      case SYNCHRONIZED:
      case LPAREN:
      case AT:
      case INCR:
      case DECR:
      case VOID:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_18;
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Statement GenericStatement() throws ParseException {Statement ret;
    Expression expr;
    ClassOrInterfaceDeclaration typeDecl;
    ModifierDeclaration modifier;
    LineInfo linfo = new LineInfo();
    if (jj_2_15(2147483647)) {
      expr = VariableDeclarationExpression();
      jj_consume_token(SEMICOLON);
linfo.updateBegin(expr);
                linfo.updateEnd(token);
                ret = new ExpressionStmt(linfo, expr);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case DO:
      case FOR:
      case TRY:
      case NEW:
      case PASS:
      case TRUE:
      case NULL:
      case THIS:
      case FALSE:
      case SUPER:
      case WHILE:
      case BREAK:
      case THROW:
      case SWITCH:
      case RETURN:
      case ASSERT:
      case CONTINUE:
      case SYNCHRONIZED:
      case LPAREN:
      case INCR:
      case DECR:
      case VOID:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        ret = Statement();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public 
Statement Statement() throws ParseException {Statement ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSERT:{
      //LOOKAHEAD(2)
              ret = AssertStatement();
      break;
      }
    case PASS:{
      ret = EmptyStatement();
      break;
      }
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case INCR:
    case DECR:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      ret = StatementExpression();
      break;
      }
    case SWITCH:{
      ret = SwitchStatement();
      break;
      }
    case IF:{
      ret = IfStatement();
      break;
      }
    case WHILE:{
      ret = WhileStatement();
      break;
      }
    case DO:{
      ret = DoWhileStatement();
      break;
      }
    case FOR:{
      ret = ForStatement();
      break;
      }
    case BREAK:{
      ret = BreakStatement();
      break;
      }
    case CONTINUE:{
      ret = ContinueStatement();
      break;
      }
    case RETURN:{
      ret = ReturnStatement();
      break;
      }
    case THROW:{
      ret = ThrowStatement();
      break;
      }
    case SYNCHRONIZED:{
      ret = SynchronizedStatement();
      break;
      }
    case TRY:{
      ret = TryStatement();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public AssertStmt AssertStatement() throws ParseException {Expression check;
    Expression msg = null;
    LineInfo linfo = new LineInfo();
    jj_consume_token(ASSERT);
linfo.updateBegin(token);
    check = Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      msg = Expression();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
linfo.updateEnd(token);
            {if ("" != null) return new AssertStmt(linfo, check, msg);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationExpr VariableDeclarationExpression() throws ParseException {ModifierDeclaration modifier;
    Type type;
    List vars = new LinkedList();
    VariableDeclarator var;
    List annotations;
    LineInfo linfo = new LineInfo();
    annotations = AnnotationList();
    modifier = Modifiers();
linfo.updateBegin(modifier);
    type = Type();
    var = VariableDeclarator();
vars.add(var);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      var = VariableDeclarator();
vars.add(var);
    }
linfo.updateEnd(token);
            {if ("" != null) return new VariableDeclarationExpr(linfo, annotations, modifier, type, vars);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStmt EmptyStatement() throws ParseException {
    jj_consume_token(PASS);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new EmptyStmt(new LineInfo(token));}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStmt StatementExpression() throws ParseException {Expression expr;
    AssignOperator op;
    Expression value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCR:{
      expr = PreIncrementExpression();
      break;
      }
    case DECR:{
      expr = PreDecrementExpression();
      break;
      }
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      expr = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case ASN_ADD:
      case ASN_SUB:
      case ASN_MUL:
      case ASN_DIV:
      case ASN_BAND:
      case ASN_BOR:
      case ASN_XOR:
      case ASN_REM:
      case ASN_SHL:
      case ASN_SHR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCR:{
          jj_consume_token(INCR);
expr = new UnaryExpr(new LineInfo(expr, token), expr, UnaryOperator.POST_INCREMENT);
          break;
          }
        case DECR:{
          jj_consume_token(DECR);
expr = new UnaryExpr(new LineInfo(expr, token), expr, UnaryOperator.POST_DECREMENT);
          break;
          }
        case ASSIGN:
        case ASN_ADD:
        case ASN_SUB:
        case ASN_MUL:
        case ASN_DIV:
        case ASN_BAND:
        case ASN_BOR:
        case ASN_XOR:
        case ASN_REM:
        case ASN_SHL:
        case ASN_SHR:{
          op = AssignmentOperator();
          value = Expression();
expr = new AssignExpr(new LineInfo(expr, token), expr, value, op);
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new ExpressionStmt(new LineInfo(expr, token), expr);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStmt SwitchStatement() throws ParseException {Expression selector;
    SwitchEntryStmt entry;
    List entries = new LinkedList();
    LineInfo linfo = new LineInfo();
    jj_consume_token(SWITCH);
linfo.updateBegin(token);
    jj_consume_token(LPAREN);
    selector = Expression();
    jj_consume_token(RPAREN);
    BeginBlock();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:
      case _DEFAULT:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_20;
      }
      entry = SwitchEntry();
entries.add(entry);
    }
    EndBlock();
linfo.updateEnd(token);
            {if ("" != null) return new SwitchStmt(linfo, selector, entries);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchEntryStmt SwitchEntry() throws ParseException {Expression label = null;
    List stmts;
    LineInfo linfo = new LineInfo();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE:{
      jj_consume_token(CASE);
linfo.updateBegin(token);
      label = Expression();
      break;
      }
    case _DEFAULT:{
      jj_consume_token(_DEFAULT);
linfo.updateBegin(token);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    BeginBlock();
    stmts = StatementList();
    EndBlock();
linfo.updateEnd(token);
            {if ("" != null) return new SwitchEntryStmt(linfo, label, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public IfStmt IfStatement() throws ParseException {Expression condition;
    Statement thenStmt;
    Statement elseStmt = null;
    LineInfo linfo = new LineInfo();
    jj_consume_token(IF);
linfo.updateBegin(token);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    thenStmt = Block();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELIF:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_21;
      }
      jj_consume_token(ELIF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();

    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseStmt = Block();
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      ;
    }
linfo.updateEnd(token);
            {if ("" != null) return new IfStmt(linfo, condition, thenStmt, elseStmt);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStmt WhileStatement() throws ParseException {Expression condition;
    Statement body;
    LineInfo linfo = new LineInfo();
    jj_consume_token(WHILE);
linfo.updateBegin(token);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    body = Block();
linfo.updateEnd(token);
            {if ("" != null) return new WhileStmt(linfo, condition, body);}
    throw new Error("Missing return statement in function");
  }

  final public DoWhileStmt DoWhileStatement() throws ParseException {Expression condition;
    Statement body;
    LineInfo linfo = new LineInfo();
    jj_consume_token(DO);
    jj_consume_token(WHILE);
linfo.updateBegin(token);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    body = Block();
linfo.updateEnd(token);
            {if ("" != null) return new DoWhileStmt(linfo, body, condition);}
    throw new Error("Missing return statement in function");
  }

  final public Statement ForStatement() throws ParseException {String id = null;
    VariableDeclarationExpr varExpr = null;
    Expression expr = null;
    List init = null;
    List update = null;
    Statement body;
    LineInfo linfo = new LineInfo();
    jj_consume_token(FOR);
linfo.updateBegin(token);
    jj_consume_token(LPAREN);
    if (jj_2_16(2147483647)) {
      varExpr = VariableDeclarationExpression();
      jj_consume_token(IN);
      expr = Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:
      case TRUE:
      case NULL:
      case THIS:
      case FALSE:
      case FINAL:
      case CONST:
      case SUPER:
      case STATIC:
      case PUBLIC:
      case NATIVE:
      case EXPORT:
      case PRIVATE:
      case ABSTRACT:
      case READLOCK:
      case INTERNAL:
      case WRITELOCK:
      case PROTECTED:
      case SYNCHRONIZED:
      case LPAREN:
      case SEMICOLON:
      case AT:
      case BNEG:
      case ADD:
      case SUB:
      case INCR:
      case DECR:
      case LNEG:
      case VOID:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case NULL:
        case THIS:
        case FALSE:
        case FINAL:
        case CONST:
        case SUPER:
        case STATIC:
        case PUBLIC:
        case NATIVE:
        case EXPORT:
        case PRIVATE:
        case ABSTRACT:
        case READLOCK:
        case INTERNAL:
        case WRITELOCK:
        case PROTECTED:
        case SYNCHRONIZED:
        case LPAREN:
        case AT:
        case BNEG:
        case ADD:
        case SUB:
        case INCR:
        case DECR:
        case LNEG:
        case VOID:
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case FIXED:
        case DOUBLE:
        case BOOLEAN:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          init = ForInit();
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case NULL:
        case THIS:
        case FALSE:
        case SUPER:
        case LPAREN:
        case BNEG:
        case ADD:
        case SUB:
        case INCR:
        case DECR:
        case LNEG:
        case VOID:
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case FIXED:
        case DOUBLE:
        case BOOLEAN:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          expr = Expression();
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case NULL:
        case THIS:
        case FALSE:
        case SUPER:
        case LPAREN:
        case BNEG:
        case ADD:
        case SUB:
        case INCR:
        case DECR:
        case LNEG:
        case VOID:
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case FIXED:
        case DOUBLE:
        case BOOLEAN:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          update = ForUpdate();
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    body = Block();
linfo.updateEnd(token);
            if (varExpr != null)
                {if ("" != null) return new ForeachStmt(linfo, varExpr, expr, body);}
            else
                {if ("" != null) return new ForStmt(linfo, init, expr, update, body);}
    throw new Error("Missing return statement in function");
  }

  final public List ForInit() throws ParseException {List ret;
    Expression expr;
    if (jj_2_17(2147483647)) {
      expr = VariableDeclarationExpression();
ret = new LinkedList(); ret.add(expr);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:
      case TRUE:
      case NULL:
      case THIS:
      case FALSE:
      case SUPER:
      case LPAREN:
      case BNEG:
      case ADD:
      case SUB:
      case INCR:
      case DECR:
      case LNEG:
      case VOID:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        ret = ExpressionList();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ExpressionList() throws ParseException {List ret = new LinkedList();
    Expression expr;
    expr = Expression();
ret.add(expr);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      expr = Expression();
ret.add(expr);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ForUpdate() throws ParseException {List ret;
    ret = ExpressionList();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BreakStmt BreakStatement() throws ParseException {String id = null;
    LineInfo linfo = new LineInfo();
    jj_consume_token(BREAK);
linfo.updateBegin(token);
    jj_consume_token(SEMICOLON);
linfo.updateEnd(token);
            {if ("" != null) return new BreakStmt(linfo);}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStmt ContinueStatement() throws ParseException {String id = null;
    LineInfo linfo = new LineInfo();
    jj_consume_token(CONTINUE);
linfo.updateBegin(token);
    jj_consume_token(SEMICOLON);
linfo.updateEnd(token);
            {if ("" != null) return new ContinueStmt(linfo);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStmt ReturnStatement() throws ParseException {Expression expr = null;
    LineInfo linfo = new LineInfo();
    jj_consume_token(RETURN);
linfo.updateBegin(token);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case BNEG:
    case ADD:
    case SUB:
    case INCR:
    case DECR:
    case LNEG:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      expr = Expression();
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
linfo.updateEnd(token);
            {if ("" != null) return new ReturnStmt(linfo, expr);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStmt ThrowStatement() throws ParseException {Expression expr;
    LineInfo linfo = new LineInfo();
    jj_consume_token(THROW);
linfo.updateBegin(token);
    expr = Expression();
    jj_consume_token(SEMICOLON);
linfo.updateEnd(token);
            {if ("" != null) return new ThrowStmt(linfo, expr);}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStmt SynchronizedStatement() throws ParseException {Expression expr;
    BlockStmt block;
    LineInfo linfo = new LineInfo();
    jj_consume_token(SYNCHRONIZED);
linfo.updateBegin(token);
    jj_consume_token(LPAREN);
    expr = Expression();
    jj_consume_token(RPAREN);
    block = Block();
linfo.updateEnd(token);
            {if ("" != null) return new SynchronizedStmt(linfo, expr, block);}
    throw new Error("Missing return statement in function");
  }

  final public TryStmt TryStatement() throws ParseException {BlockStmt tryBlock;
    BlockStmt finallyBlock = null;
    List<CatchClause> catchs = new LinkedList<CatchClause>();
    Parameter except;
    BlockStmt catchBlock;
    LineInfo linfo = new LineInfo();
    LineInfo cinfo = null;
    jj_consume_token(TRY);
linfo.updateBegin(token);
    tryBlock = Block();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CATCH:{
      label_23:
      while (true) {
        jj_consume_token(CATCH);
cinfo = new LineInfo(token, null);
        jj_consume_token(LPAREN);
        except = FormalParameter();
        jj_consume_token(RPAREN);
        catchBlock = Block();
cinfo.updateEnd(token);
                    catchs.add( new CatchClause(cinfo, except, catchBlock) );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CATCH:{
          ;
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          break label_23;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALLY:{
        jj_consume_token(FINALLY);
        finallyBlock = Block();
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      break;
      }
    case FINALLY:{
      jj_consume_token(FINALLY);
      finallyBlock = Block();
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
linfo.updateEnd(token);
        {if ("" != null) return new TryStmt(linfo, tryBlock, catchs, finallyBlock);}
    throw new Error("Missing return statement in function");
  }

/*
 * Annotation syntax.
 */
  final public 

List AnnotationList() throws ParseException {List<AnnotationExpr> annotations = new LinkedList<AnnotationExpr>();
    AnnotationExpr ann;
    label_24:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_24;
      }
      ann = Annotation();
annotations.add(ann);
    }
{if ("" != null) return annotations;}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationExpr Annotation() throws ParseException {AnnotationExpr ret;
    if (jj_2_19(2147483647)) {
      ret = NormalAnnotation();
    } else if (jj_2_20(2147483647)) {
      ret = SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AT:{
        ret = MarkerAnnotation();
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public NormalAnnotationExpr NormalAnnotation() throws ParseException {NameExpr name;
    List pairs = null;
    LineInfo linfo = new LineInfo();
    jj_consume_token(AT);
linfo.updateBegin(token);
    name = Name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      pairs = MemberValuePairs();
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
linfo.updateEnd(token);
            {if ("" != null) return new NormalAnnotationExpr(linfo, name, pairs);}
    throw new Error("Missing return statement in function");
  }

  final public MarkerAnnotationExpr MarkerAnnotation() throws ParseException {NameExpr name;
    LineInfo linfo = new LineInfo();
    jj_consume_token(AT);
linfo.updateBegin(token);
    name = Name();
linfo.updateEnd(token);
            {if ("" != null) return new MarkerAnnotationExpr(linfo, name);}
    throw new Error("Missing return statement in function");
  }

  final public SingleMemberAnnotationExpr SingleMemberAnnotation() throws ParseException {NameExpr name;
    Expression memberVal;
    LineInfo linfo = new LineInfo();
    jj_consume_token(AT);
linfo.updateBegin(token);
    name = Name();
    jj_consume_token(LPAREN);
    memberVal = MemberValue();
    jj_consume_token(RPAREN);
linfo.updateEnd(token);
            {if ("" != null) return new SingleMemberAnnotationExpr(linfo, name, memberVal);}
    throw new Error("Missing return statement in function");
  }

  final public List MemberValuePairs() throws ParseException {List ret = new LinkedList();
    MemberValuePair pair;
    pair = MemberValuePair();
ret.add(pair);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      pair = MemberValuePair();
ret.add(pair);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePair MemberValuePair() throws ParseException {String name;
    Expression value;
    LineInfo linfo = new LineInfo();
    jj_consume_token(IDENTIFIER);
name = token.image;
            linfo.updateBegin(token);
    jj_consume_token(ASSIGN);
    value = MemberValue();
linfo.updateEnd(token);
            {if ("" != null) return new MemberValuePair(linfo, name, value);}
    throw new Error("Missing return statement in function");
  }

  final public Expression MemberValue() throws ParseException {Expression ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AT:{
      ret = Annotation();
      break;
      }
    case LBRACKET:{
      ret = MemberValueArrayInitializer();
      break;
      }
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case BNEG:
    case ADD:
    case SUB:
    case INCR:
    case DECR:
    case LNEG:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      ret = ConditionalExpression();
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MemberValueArrayInitializer() throws ParseException {List ret = new LinkedList();
    Expression member;
    LineInfo linfo = new LineInfo();
    jj_consume_token(LBRACKET);
linfo.updateBegin(token);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case LBRACKET:
    case AT:
    case BNEG:
    case ADD:
    case SUB:
    case INCR:
    case DECR:
    case LNEG:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      member = MemberValue();
ret.add(member);
      label_26:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_26;
        }
        jj_consume_token(COMMA);
        member = MemberValue();
ret.add(member);
      }
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
linfo.updateEnd(token);
            {if ("" != null) return new ArrayInitializerExpr(linfo, ret);}
    throw new Error("Missing return statement in function");
  }

/* Annotation Types. */
  final public 
AnnotationDeclaration AnnotationTypeDeclaration(List<AnnotationExpr> annotations, ModifierDeclaration modifier) throws ParseException {String name;
    List members;
    LineInfo linfo = new LineInfo();
    jj_consume_token(AT);
linfo.updateBegin(token);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
name = token.image;
    members = AnnotationTypeBody();
linfo.updateEnd(token);
            {if ("" != null) return new AnnotationDeclaration(linfo,/*popJavadoc()*/null,
                annotations, modifier, name, members);}
    throw new Error("Missing return statement in function");
  }

  final public List AnnotationTypeBody() throws ParseException {List ret = new LinkedList();
    BodyDeclaration member;
    BeginBlock();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENUM:
      case FINAL:
      case CONST:
      case CLASS:
      case STATIC:
      case PUBLIC:
      case NATIVE:
      case EXPORT:
      case PRIVATE:
      case ABSTRACT:
      case READLOCK:
      case INTERNAL:
      case WRITELOCK:
      case PROTECTED:
      case INTERFACE:
      case SYNCHRONIZED:
      case SEMICOLON:
      case AT:
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        break label_27;
      }
      member = AnnotationBodyDeclaration();
ret.add(member);
    }
    EndBlock();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BodyDeclaration AnnotationBodyDeclaration() throws ParseException {ModifierDeclaration modifier;
   List<AnnotationExpr> annotations;
   BodyDeclaration ret;
   LineInfo linfo = new LineInfo();

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
linfo.update(token);
                ret = new EmptyTypeDeclaration(linfo, /*popJavadoc()*/null);
      break;
      }
    case ENUM:
    case FINAL:
    case CONST:
    case CLASS:
    case STATIC:
    case PUBLIC:
    case NATIVE:
    case EXPORT:
    case PRIVATE:
    case ABSTRACT:
    case READLOCK:
    case INTERNAL:
    case WRITELOCK:
    case PROTECTED:
    case INTERFACE:
    case SYNCHRONIZED:
    case AT:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case IDENTIFIER:{
      annotations = AnnotationList();
      modifier = Modifiers();
      if (jj_2_22(2147483647)) {
        ret = AnnotationTypeMemberDeclaration(annotations, modifier);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:
        case INTERFACE:{
          ret = ClassOrInterfaceDeclaration(annotations, modifier);
          break;
          }
        case ENUM:{
          ret = EnumDeclaration(annotations, modifier);
          break;
          }
        case AT:{
          ret = AnnotationTypeDeclaration(annotations, modifier);
          break;
          }
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case FIXED:
        case DOUBLE:
        case BOOLEAN:
        case IDENTIFIER:{
          ret = FieldDeclaration(annotations, modifier);
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationMemberDeclaration AnnotationTypeMemberDeclaration(List<AnnotationExpr> annotations, ModifierDeclaration modifier) throws ParseException {Type type;
    String name;
    Expression defaultVal = null;
    LineInfo linfo = new LineInfo(modifier, null);
    type = Type();
    jj_consume_token(IDENTIFIER);
name = token.image;
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _DEFAULT:{
      defaultVal = DefaultValue();
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
linfo.update(token);
            {if ("" != null) return new AnnotationMemberDeclaration(linfo, /*popJavadoc()*/null, annotations, modifier, type, name, defaultVal);}
    throw new Error("Missing return statement in function");
  }

  final public Expression DefaultValue() throws ParseException {Expression ret;
    jj_consume_token(_DEFAULT);
    ret = MemberValue();
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public 
Expression Expression() throws ParseException {Expression ret;
    AssignOperator op;
    Expression value;
    ret = ConditionalExpression();
    if (jj_2_23(2)) {
      op = AssignmentOperator();
      value = Expression();
ret = new AssignExpr(new LineInfo(ret, token), ret, value, op);
    } else {
      ;
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public AssignOperator AssignmentOperator() throws ParseException {AssignOperator ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
ret = AssignOperator.ASSIGN;
      break;
      }
    case ASN_MUL:{
      jj_consume_token(ASN_MUL);
ret = AssignOperator.ASN_MUL;
      break;
      }
    case ASN_DIV:{
      jj_consume_token(ASN_DIV);
ret = AssignOperator.ASN_DIV;
      break;
      }
    case ASN_REM:{
      jj_consume_token(ASN_REM);
ret = AssignOperator.ASN_REM;
      break;
      }
    case ASN_ADD:{
      jj_consume_token(ASN_ADD);
ret = AssignOperator.ASN_ADD;
      break;
      }
    case ASN_SUB:{
      jj_consume_token(ASN_SUB);
ret = AssignOperator.ASN_SUB;
      break;
      }
    case ASN_SHL:{
      jj_consume_token(ASN_SHL);
ret = AssignOperator.ASN_SHL;
      break;
      }
    case ASN_SHR:{
      jj_consume_token(ASN_SHR);
ret = AssignOperator.ASN_SHR;
      break;
      }
    case ASN_BAND:{
      jj_consume_token(ASN_BAND);
ret = AssignOperator.ASN_BAND;
      break;
      }
    case ASN_XOR:{
      jj_consume_token(ASN_XOR);
ret = AssignOperator.ASN_XOR;
      break;
      }
    case ASN_BOR:{
      jj_consume_token(ASN_BOR);
ret = AssignOperator.ASN_BOR;
      break;
      }
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpression() throws ParseException {Expression ret;
    Expression left;
    Expression right;
    ret = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HOOK:{
      jj_consume_token(HOOK);
      left = Expression();
      jj_consume_token(COLON);
      right = ConditionalExpression();
ret = new ConditionalExpr(new LineInfo(ret, token), ret, left, right);
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      ;
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {Expression ret;
    Expression right;
    ret = ConditionalAndExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOR:{
        ;
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        break label_28;
      }
      jj_consume_token(LOR);
      right = ConditionalAndExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, BinaryOperator.LOR);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression() throws ParseException {Expression ret;
    Expression right;
    ret = InclusiveOrExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LAND:{
        ;
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        break label_29;
      }
      jj_consume_token(LAND);
      right = InclusiveOrExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, BinaryOperator.LAND);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InclusiveOrExpression() throws ParseException {Expression ret;
    Expression right;
    ret = ExclusiveOrExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOR:{
        ;
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        break label_30;
      }
      jj_consume_token(BOR);
      right = ExclusiveOrExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, BinaryOperator.BOR);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExclusiveOrExpression() throws ParseException {Expression ret;
    Expression right;
    ret = AndExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XOR:{
        ;
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        break label_31;
      }
      jj_consume_token(XOR);
      right = AndExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, BinaryOperator.XOR);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {Expression ret;
    Expression right;
    ret = EqualityExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BAND:{
        ;
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        break label_32;
      }
      jj_consume_token(BAND);
      right = EqualityExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, BinaryOperator.BAND);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpression() throws ParseException {Expression ret;
    Expression right;
    BinaryOperator op;
    ret = InstanceOfExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
op = BinaryOperator.EQ;
        break;
        }
      case NE:{
        jj_consume_token(NE);
op = BinaryOperator.NE;
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = InstanceOfExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, op);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InstanceOfExpression() throws ParseException {Expression ret;
    Type type;
    ret = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTANCEOF:{
      jj_consume_token(INSTANCEOF);
      type = Type();
ret = new InstanceOfExpr(new LineInfo(ret, token), ret, type);
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      ;
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {Expression ret;
    Expression right;
    BinaryOperator op;
    ret = ShiftExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
op = BinaryOperator.LT;
        break;
        }
      case GT:{
        jj_consume_token(GT);
op = BinaryOperator.GT;
        break;
        }
      case LE:{
        jj_consume_token(LE);
op = BinaryOperator.LE;
        break;
        }
      case GE:{
        jj_consume_token(GE);
op = BinaryOperator.GE;
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = ShiftExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, op);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ShiftExpression() throws ParseException {Expression ret;
    Expression right;
    BinaryOperator op;
    ret = AdditiveExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SHL:
      case SHR:{
        ;
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SHL:{
        jj_consume_token(SHL);
op = BinaryOperator.SHL;
        break;
        }
      case SHR:{
        jj_consume_token(SHR);
op = BinaryOperator.SHR;
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AdditiveExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, op);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {Expression ret;
    Expression right;
    BinaryOperator op;
    ret = MultiplicativeExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SUB:{
        ;
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        break label_36;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
op = BinaryOperator.ADD;
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
op = BinaryOperator.SUB;
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = MultiplicativeExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, op);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {Expression ret;
    Expression right;
    BinaryOperator op;
    ret = UnaryExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        break label_37;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        jj_consume_token(MUL);
op = BinaryOperator.MUL;
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
op = BinaryOperator.DIV;
        break;
        }
      case REM:{
        jj_consume_token(REM);
op = BinaryOperator.REM;
        break;
        }
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = UnaryExpression();
ret = new BinaryExpr(new LineInfo(ret, token), ret, right, op);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression() throws ParseException {Expression ret;
    UnaryOperator op;
    LineInfo linfo = new LineInfo();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCR:{
      ret = PreIncrementExpression();
      break;
      }
    case DECR:{
      ret = PreDecrementExpression();
      break;
      }
    case ADD:
    case SUB:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
op = UnaryOperator.PLUS;
                    linfo.updateBegin(token);
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
op = UnaryOperator.MINUS;
                    linfo.updateBegin(token);
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ret = UnaryExpression();
if (op == UnaryOperator.MINUS)
                {
                    linfo.updateEnd(token);
                    ret = new UnaryExpr(linfo, ret, op);
                }
                else
                {
                    linfo.updateEnd(token);
                    ret = new UnaryExpr(linfo, ret, op);
                }
      break;
      }
    case NEW:
    case TRUE:
    case NULL:
    case THIS:
    case FALSE:
    case SUPER:
    case LPAREN:
    case BNEG:
    case LNEG:
    case VOID:
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:{
      ret = UnaryExpressionNotPlusMinus();
      break;
      }
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PreIncrementExpression() throws ParseException {Expression ret;
    LineInfo linfo = new LineInfo();
    jj_consume_token(INCR);
linfo.updateBegin(token);
    ret = UnaryExpression();
linfo.updateEnd(token);
            {if ("" != null) return new UnaryExpr(linfo, ret, UnaryOperator.PRE_INCREMENT);}
    throw new Error("Missing return statement in function");
  }

  final public Expression PreDecrementExpression() throws ParseException {Expression ret;
    LineInfo linfo = new LineInfo();
    jj_consume_token(DECR);
linfo.updateBegin(token);
    ret = UnaryExpression();
linfo.updateEnd(token);
            ret = new UnaryExpr(linfo, ret, UnaryOperator.PRE_DECREMENT);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpressionNotPlusMinus() throws ParseException {Expression ret;
    UnaryOperator op;
    LineInfo linfo = new LineInfo();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BNEG:
    case LNEG:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BNEG:{
        jj_consume_token(BNEG);
op = UnaryOperator.BNEG;
                    linfo.updateBegin(token);
        break;
        }
      case LNEG:{
        jj_consume_token(LNEG);
op = UnaryOperator.LNEG;
                    linfo.updateBegin(token);
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ret = UnaryExpression();
linfo.updateEnd(token);
                ret = new UnaryExpr(linfo, ret, op);
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      if (jj_2_24(2147483647)) {
        ret = CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case NULL:
        case THIS:
        case FALSE:
        case SUPER:
        case LPAREN:
        case VOID:
        case CHAR:
        case BYTE:
        case SHORT:
        case INT:
        case LONG:
        case FLOAT:
        case FIXED:
        case DOUBLE:
        case BOOLEAN:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          ret = PostfixExpression();
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PostfixExpression() throws ParseException {Expression ret;
    UnaryOperator op;
    ret = PrimaryExpression();
    if (jj_2_25(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
        jj_consume_token(INCR);
op = UnaryOperator.POST_INCREMENT;
        break;
        }
      case DECR:{
        jj_consume_token(DECR);
op = UnaryOperator.POST_DECREMENT;
        break;
        }
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
ret = new UnaryExpr(new LineInfo(ret, token), ret, op);
    } else {
      ;
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CastExpression() throws ParseException {Expression ret;
    Type type;
    LineInfo linfo = new LineInfo();
    jj_consume_token(LPAREN);
linfo.updateBegin(token);
    if (jj_2_26(3)) {
      type = ArrayType();
      jj_consume_token(RPAREN);
      ret = UnaryExpressionNotPlusMinus();
linfo.updateEnd(token);
                ret = new CastExpr(linfo, type, ret);
    } else if (jj_2_27(2)) {
      type = ClassOrInterfaceType();
      jj_consume_token(RPAREN);
      ret = UnaryExpressionNotPlusMinus();
linfo.updateEnd(token);
                ret = new CastExpr(linfo, type, ret);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:
      case BYTE:
      case SHORT:
      case INT:
      case LONG:
      case FLOAT:
      case FIXED:
      case DOUBLE:
      case BOOLEAN:{
        type = PrimitiveType();
        jj_consume_token(RPAREN);
        ret = UnaryExpression();
linfo.updateEnd(token);
                ret = new CastExpr(linfo, type, ret);
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {Expression ret;
    Expression inner;
    ret = PrimaryPrefix();
    label_38:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_38;
      }
      ret = PrimarySuffix(ret);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpressionWithoutSuperSuffix() throws ParseException {Expression ret;
    Expression inner;
    ret = PrimaryPrefix();
    label_39:
    while (true) {
      if (jj_2_29(2147483647)) {
        ;
      } else {
        break label_39;
      }
      ret = PrimarySuffixWithoutSuper(ret);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryPrefix() throws ParseException {Expression ret;
    String name;
    List typeArgs = null;
    List args = null;
    boolean hasArgs = false;
    Type type;
    LineInfo linfo;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case NULL:
    case FALSE:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      ret = Literal();
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
ret = new ThisExpr(new LineInfo(token), null);
      break;
      }
    case SUPER:{
      jj_consume_token(SUPER);
ret = new SuperExpr(new LineInfo(token), null);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
name = token.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        args = Arguments();
hasArgs=true;
        break;
        }
      default:
        jj_la1[94] = jj_gen;
        ;
      }
if (hasArgs)
                ret = new MethodCallExpr(new LineInfo(ret, token), ret, name, args);
            else
                ret = new FieldAccessExpr(new LineInfo(ret, token), ret, name);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
linfo = new LineInfo(token, null);
      ret = Expression();
      jj_consume_token(RPAREN);
linfo.updateEnd(token);
                ret = new EnclosedExpr(linfo, ret);
      break;
      }
    case NEW:{
      ret = AllocationExpression(null);
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      if (jj_2_30(2147483647)) {
        type = ResultType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
ret = new ClassExpr(new LineInfo(type, token), type);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
name = token.image;
                linfo = new LineInfo(token, null);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            args = Arguments();
hasArgs=true;
            break;
            }
          default:
            jj_la1[95] = jj_gen;
            ;
          }
linfo.updateEnd(token);
                if (hasArgs)
                    ret =  new MethodCallExpr(linfo, null, name, args);
                else
                    ret =  new NameExpr(linfo, name);
          break;
          }
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimarySuffix(Expression scope) throws ParseException {Expression ret;
    if (jj_2_31(2)) {
      ret = PrimarySuffixWithoutSuper(scope);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        jj_consume_token(SUPER);
ret = new SuperExpr(new LineInfo(scope, token), scope);
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimarySuffixWithoutSuper(Expression scope) throws ParseException {Expression ret;
    List args = null;
    boolean hasArgs = false;
    String name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:{
        jj_consume_token(THIS);
ret = new ThisExpr(new LineInfo(scope, token), scope);
        break;
        }
      case NEW:{
        ret = AllocationExpression(scope);
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        if (jj_2_32(2147483647)) {
          jj_consume_token(IDENTIFIER);
name = token.image;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            args = Arguments();
hasArgs=true;
            break;
            }
          default:
            jj_la1[99] = jj_gen;
            ;
          }
if (hasArgs)
                    ret = new MethodCallExpr(new LineInfo(scope, token), scope, name, args);
                else
                    ret = new FieldAccessExpr(new LineInfo(scope, token), scope, name);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      ret = Expression();
      jj_consume_token(RBRACKET);
ret = new ArrayAccessExpr(new LineInfo(scope, token), scope, ret);
      break;
      }
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Literal() throws ParseException {Expression ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
ret = new IntegerLiteralExpr(new LineInfo(token), token.image);
      break;
      }
    case LONG_LITERAL:{
      jj_consume_token(LONG_LITERAL);
ret = new LongLiteralExpr(new LineInfo(token), token.image);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
ret = new DoubleLiteralExpr(new LineInfo(token), token.image);
      break;
      }
    case CHARACTER_LITERAL:{
      jj_consume_token(CHARACTER_LITERAL);
ret = new CharLiteralExpr(new LineInfo(token), token.image.substring(1, token.image.length()-1));
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
ret = new StringLiteralExpr(new LineInfo(token), token.image.substring(1, token.image.length()-1));
      break;
      }
    case TRUE:
    case FALSE:{
      ret = BooleanLiteral();
      break;
      }
    case NULL:{
      ret = NullLiteral();
      break;
      }
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanLiteral() throws ParseException {Expression ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
ret = new BooleanLiteralExpr(new LineInfo(token), true);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
ret = new BooleanLiteralExpr(new LineInfo(token), false);
      break;
      }
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NullLiteral() throws ParseException {
    jj_consume_token(NULL);
{if ("" != null) return new NullLiteralExpr(new LineInfo(token));}
    throw new Error("Missing return statement in function");
  }

  final public Expression AllocationExpression(Expression scope) throws ParseException {Expression ret;
    Type type;
    Object[] arr = null;
    List args;
    LineInfo linfo = new LineInfo();
    jj_consume_token(NEW);
if (scope == null)
                linfo.updateBegin(token);
            else
                linfo.updateBegin(scope);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case BYTE:
    case SHORT:
    case INT:
    case LONG:
    case FLOAT:
    case FIXED:
    case DOUBLE:
    case BOOLEAN:{
      type = PrimitiveType();
      arr = ArrayDimsAndInits();
linfo.updateEnd(token);
            if (arr[0] instanceof Integer)
            {
                ret = new ArrayCreationExpr(linfo, type, ((Integer)arr[0]).intValue(), (ArrayInitializerExpr)arr[1]);
            }
            else
            {
                ret = new ArrayCreationExpr(linfo, type, (List)arr[0], ((Integer)arr[1]).intValue());
            }
      break;
      }
    default:
      jj_la1[104] = jj_gen;
      if (jj_2_33(2147483647)) {
        type = ClassOrInterfaceType();
        arr = ArrayDimsAndInits();
linfo.updateEnd(token);
                if (arr[0] instanceof Integer)
                {
                    ret = new ArrayCreationExpr(linfo, type, ((Integer)arr[0]).intValue(), (ArrayInitializerExpr)arr[1]);
                }
                else
                {
                    ret = new ArrayCreationExpr(linfo, type, (List)arr[0], ((Integer)arr[1]).intValue());
                }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          type = ClassOrInterfaceType();
          args = Arguments();
linfo.updateEnd(token);
                ret = new ObjectCreationExpr(linfo, scope, (ClassOrInterfaceType) type, args);
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[" and "]".
 */
/*
 * Match with something like "[][] = [ [1, 2], [3, 4]" where the numbers can be any expression.
 */
  final public Object[] ArrayDimsAndInits() throws ParseException {Object[] ret = new Object[2];
    Expression expr;
    List inits = new LinkedList();
    int i = 0;
    if (jj_2_37(2)) {
      label_40:
      while (true) {
        jj_consume_token(LBRACKET);
        expr = Expression();
inits.add(expr);
        jj_consume_token(RBRACKET);
        if (jj_2_34(2)) {
          ;
        } else {
          break label_40;
        }
      }
      label_41:
      while (true) {
        if (jj_2_35(2)) {
          ;
        } else {
          break label_41;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
i++;
      }
ret[0] = inits;
                ret[1] = new Integer(i);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        label_42:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
i++;
          if (jj_2_36(2)) {
            ;
          } else {
            break label_42;
          }
        }
        expr = ArrayInitializer();
ret[0] = new Integer(i);
                ret[1] = expr;
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_3R_222()
 {
    if (jj_3R_226()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(WRITELOCK)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(INTERNAL)) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(READLOCK)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_45()) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(EXPORT)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_235()
 {
    if (jj_scan_token(SHR)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_48()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_234()
 {
    if (jj_scan_token(SHL)) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_48()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_220()
 {
    if (jj_3R_222()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_228()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_65()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_52()) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_65()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_232()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_231()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_229()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_227()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    }
    }
    }
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_46()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_51()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_218()
 {
    if (jj_3R_220()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_227()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_217()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_223()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_215()
 {
    if (jj_3R_218()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_45()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_225()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_224()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_221()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_211()
 {
    if (jj_3R_215()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_67()) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_65()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_213()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_219()
 {
    if (jj_scan_token(BAND)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_208()
 {
    if (jj_3R_211()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_118()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_214()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_62()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_3R_213()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_3R_208()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_212()
 {
    if (jj_scan_token(BOR)) return true;
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_3R_202()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    Token xsp;
    if (jj_3_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  private boolean jj_3_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_209()
 {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_3R_203()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_3R_190()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_207()
 {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_204()
 {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_3R_62()) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_62()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_192()
 {
    if (jj_scan_token(LNEG)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_191()
 {
    if (jj_scan_token(BNEG)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_3R_62()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_147()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_148()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_3R_118()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(ASN_BOR)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(ASN_XOR)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(ASN_BAND)) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(ASN_SHR)) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(FIXED)) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_199()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(ASN_SHL)) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(ASN_SUB)) return true;
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(ASN_ADD)) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(ASN_REM)) return true;
    return false;
  }

  private boolean jj_3R_206()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(ASN_DIV)) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_205()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(ASN_MUL)) return true;
    return false;
  }

  private boolean jj_3R_200()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_67()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_67()) return true;
    if (jj_3R_52()) return true;
    if (jj_3R_45()) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_3R_62()) return true;
    Token xsp;
    if (jj_3_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_57()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_118()) return true;
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_149()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_104()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_241()
 {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_240()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_239()
 {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_236()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    }
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_226()
 {
    if (jj_3R_149()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_238()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_45()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_233()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BeagleParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[107];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0x1,0x0,0x0,0xe0300000,0xe0300000,0x8001000,0x0,0x0,0xe8301000,0x0,0x0,0x4f0400,0x0,0x8000000,0x0,0x0,0x0,0x0,0x1,0x8001000,0x0,0xe6ff0fc0,0x4f0400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4f0400,0x4f0400,0x0,0x0,0xe0300000,0x0,0xe6ff0fc0,0x6cf0fc0,0x6cf0fc0,0x0,0x0,0x0,0x0,0x4f0400,0x4000,0x4000,0x2000,0x8000,0xe07f0400,0x4f0400,0x4f0400,0xe07f0400,0x4f0400,0x0,0x4f0400,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x4f0400,0x4f0400,0x0,0xe8301000,0x8001000,0xe8301000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4f0400,0x0,0x0,0x4f0400,0x0,0x0,0x0,0x0,0x4f0400,0x0,0x0,0x0,0x40400,0x0,0xb0000,0x90000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10000000,0x8000000,0x46e41,0x46e41,0x8000,0x20000,0x10000000,0x1004ee41,0x2000000,0x80000,0x80000,0x4000000,0x8000,0x80,0x20000,0x4000000,0x4000000,0x400000,0x10008000,0x0,0x100c7e4f,0x80000,0x4000000,0x20000000,0x0,0x0,0x0,0x0,0x4000000,0x880000,0x880000,0x4000000,0x4000000,0x46e41,0x0,0x100c7e4f,0xc100e,0xc100e,0x0,0x4000000,0x20000000,0x20000000,0x80000,0x100,0x100,0x0,0x0,0x100c6e41,0x80000,0x80000,0x120c6e41,0x80000,0x4000000,0x80000,0x0,0x10,0x10,0x10000000,0x0,0x4000000,0x10880000,0x10880000,0x4000000,0x1204ee41,0x10008000,0x1204ee41,0x100,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x80000,0x0,0x0,0x80000,0x0,0x0,0x80000,0x80000,0x80000,0x0,0x8000000,0x80000,0x0,0x8800000,0x0,0x0,0x0,0x0,0x800000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40030640,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40030640,0x40030640,0x0,0x0,0x0,0x10000000,0x30000,0x30000,0x30000,0x100,0x0,0x8ff30000,0x8ff30000,0x30000,0x0,0x0,0x0,0x0,0x40030640,0x40030640,0x40030640,0x40030640,0x40030640,0x0,0x40030640,0x0,0x0,0x0,0x0,0x0,0x0,0x40030640,0x40030640,0x0,0x0,0x0,0x0,0x0,0x8ff00000,0x80,0x8000,0x20000000,0x2,0x4,0x1,0x4800,0x4800,0x0,0x3030,0x3030,0xc0000,0xc0000,0x600,0x600,0x8,0x8,0x600,0x40030640,0x40000040,0x40000040,0x0,0x30000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x8007fe,0x0,0x0,0xe11ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x8007fe,0xe11ffe,0xe11ffe,0x0,0x0,0x8007fc,0x8007fc,0x7fc,0x8007fe,0x0,0xe11ffe,0xe11ffe,0x0,0x0,0x8007fc,0x0,0xe11ffe,0xe11ffe,0xe11ffe,0x0,0x0,0x1,0x1,0xe11ffe,0x0,0x0,0x0,0x0,0xe11ffe,0xe11ffe,0xe11ffe,0xe11ffe,0xe11ffe,0x0,0xe11ffe,0x0,0x0,0x0,0x0,0x800000,0x0,0xe11ffe,0xe11ffe,0x0,0x8007fc,0x8007fc,0x8007fc,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe11ffe,0x0,0x0,0xe11ffe,0x0,0x7fc,0x0,0x0,0x611800,0x800000,0x0,0x0,0x0,0x0,0x611800,0x0,0x7fc,0x800000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[37];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BeagleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BeagleParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BeagleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BeagleParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BeagleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BeagleParser(BeagleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BeagleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[123];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 107; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 123; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 37; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
