/* BeagleParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. BeagleParserTokenManager.java */
package beagle.compiler.parser;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import beagle.compiler.ast.*;
import beagle.compiler.ast.body.*;
import beagle.compiler.ast.expression.*;
import beagle.compiler.ast.type.*;
import beagle.compiler.ast.statement.*;

/** Token Manager. */
@SuppressWarnings("unused")public class BeagleParserTokenManager implements BeagleParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L)
            return 0;
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x10000000L) != 0L)
            return 4;
         if ((active0 & 0x7ffffffffffe0L) != 0L || (active1 & 0x7fe60008000L) != 0L)
         {
            jjmatchedKind = 119;
            return 40;
         }
         return -1;
      case 1:
         if ((active0 & 0x677ffffffff00L) != 0L || (active1 & 0x5de60000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active0 & 0x18800000000e0L) != 0L || (active1 & 0x22000008000L) != 0L)
            return 40;
         return -1;
      case 2:
         if ((active0 & 0x777fffffff800L) != 0L || (active1 & 0x7de00000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active0 & 0x880000000700L) != 0L || (active1 & 0x2060000000L) != 0L)
            return 40;
         return -1;
      case 3:
         if ((active0 & 0x7fffffff80000L) != 0L || (active1 & 0x79000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
            return 40;
         }
         if ((active0 & 0x7f800L) != 0L || (active1 & 0x4e00000000L) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active0 & 0x7ffeff0000000L) != 0L || (active1 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 4;
            }
            return 40;
         }
         if ((active0 & 0x100ff80000L) != 0L || (active1 & 0x19000000000L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x7fff000000000L) != 0L || (active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 5;
            return 40;
         }
         if ((active0 & 0xff0000000L) != 0L || (active1 & 0x20000000000L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active0 & 0x7fe0000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active0 & 0x1f000000000L) != 0L || (active1 & 0x40000000000L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x7e00000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active0 & 0x1e0000000000L) != 0L)
            return 40;
         return -1;
      case 8:
         if ((active0 & 0x7000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 8;
            return 40;
         }
         if ((active0 & 0xe00000000000L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 9;
            return 40;
         }
         if ((active0 & 0x3000000000000L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         return jjStartNfaWithStates_0(0, 2, 0);
      case 26:
         return jjStopAtPos(0, 122);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 37:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 38:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 40:
         return jjStopAtPos(0, 51);
      case 41:
         return jjStopAtPos(0, 52);
      case 42:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 43:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x110000L);
      case 44:
         return jjStopAtPos(0, 58);
      case 45:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x220000L);
      case 46:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 47:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 58:
         return jjStopAtPos(0, 72);
      case 59:
         return jjStopAtPos(0, 57);
      case 60:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80041000L);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 62:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100082000L);
      case 63:
         return jjStopAtPos(0, 71);
      case 64:
         return jjStopAtPos(0, 60);
      case 91:
         return jjStopAtPos(0, 55);
      case 93:
         return jjStopAtPos(0, 56);
      case 94:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20800000000L, 0x20000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x40800000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100009204000L, 0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000000080L, 0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x810000b000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000180100L, 0x18000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3880010000060L, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80020400L, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x406040000800L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40400000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000220400000L, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4050200L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000800000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 53);
      case 124:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 125:
         return jjStopAtPos(0, 54);
      case 126:
         return jjStopAtPos(0, 70);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 45:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
      case 60:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L);
      case 61:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 62:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2081084800L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x50400000400L, active1, 0L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4840000L, active1, 0x1400000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000100000L, active1, 0x10000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800a000L, active1, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000010000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1880000001000L, active1, 0x2020000000L);
      case 111:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000200100L, active1, 0x64240000000L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x604002010200L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40420000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8100000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 92);
         break;
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40028000000L, active1, 0x400000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 40);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x204200842000L, active1, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4101000300000L, active1, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x49000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000110400000L, active1, 0L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x102080000c800L, active1, 0L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 40);
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x888481000000L, active1, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x11000L, active1, 0x20000000000L);
      case 119:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 40);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x11002100000L, active1, 0x8000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000001000000L, active1, 0L);
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 40);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 40);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 40);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x888800400000L, active1, 0x10000000000L);
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 40);
         break;
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000040800000L, active1, 0x40000000000L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x114000000L, active1, 0L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 40);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x8280000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1720220000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1006000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 40);
         break;
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 40);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x2600000000000L, active1, 0x40000000000L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100060000000L, active1, 0L);
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 40);
         break;
      case 108:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x41000000000L, active1, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x8a0d10000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 40);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 40);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 40);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 40);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
      case 119:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x40000000000L);
      case 99:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 40);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 40);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 40);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 40);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x211000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x1180000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 40);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 40);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x880000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1060000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 40);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4200000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 40);
         break;
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00000000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000000L);
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 40);
         break;
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 40);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 40);
         break;
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      case 107:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 48, 40);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 40);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x7fffffffffffffL, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x401f0003ffc3L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0x33fffffffff7fffL
};
static final long[] jjbitVec8 = {
   0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffec000000007ffL, 0xffffffffffffffffL, 0x9c00c060002fffffL
};
static final long[] jjbitVec10 = {
   0xfffffffd0000L, 0xe000L, 0x2003fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23fffffffffffff0L, 0x3ff010000L, 0x23c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x2000300010000L
};
static final long[] jjbitVec13 = {
   0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3bfc718d63dc7e8L, 0x200000000000000L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x23effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x1ffffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x1c7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x18800000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0x1fffffffL, 0x1f3fffffff0000L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xfffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec29 = {
   0x8000000000000000L, 0x8002000000100001L, 0x3ffff00000000L, 0x0L
};
static final long[] jjbitVec30 = {
   0xe3fbbd503e2ffc84L, 0xffffffff000003e0L, 0xfL, 0x0L
};
static final long[] jjbitVec31 = {
   0x1f3e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec32 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec36 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec37 = {
   0x6L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0xffff3fffffffffffL, 0x7ffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec40 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0x1fff0000000000ffL
};
static final long[] jjbitVec41 = {
   0x18000000000000L, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec42 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec43 = {
   0x0L, 0x0L, 0x420243cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec44 = {
   0xffffffffffffffffL, 0x400ffffe0ffffffL, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
};
static final long[] jjbitVec45 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc7bL, 0x33fffffffff7fffL
};
static final long[] jjbitVec46 = {
   0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec47 = {
   0x7fffffe003f000fL, 0xffffc3ff01ffffffL, 0xffffffffffffffffL, 0x9ffffdffbfefffffL
};
static final long[] jjbitVec48 = {
   0xffffffffffff8000L, 0xe7ffL, 0x3ffffffffffffL, 0x0L
};
static final long[] jjbitVec49 = {
   0xf3fffffffffffffeL, 0xffcfff1f3fffL, 0xf3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec50 = {
   0xd36dfdfffff987eeL, 0x1fffc05e003987L, 0xf3edfdfffffbbfeeL, 0x2ffcf00013bbfL
};
static final long[] jjbitVec51 = {
   0xf3edfdfffff99feeL, 0x2ffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0x200ff8000803dc7L
};
static final long[] jjbitVec52 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xf3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec53 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec54 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec55 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec56 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x1ffffffffff003fL
};
static final long[] jjbitVec57 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec58 = {
   0x1fffff001fdfffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff388fffffL
};
static final long[] jjbitVec59 = {
   0xffffffff03ff3800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec60 = {
   0xfff0fff1fffffffL, 0x1f3fffffffffc0L, 0x0L, 0x0L
};
static final long[] jjbitVec61 = {
   0x80007c000000f000L, 0x8002fc0f00100001L, 0x3ffff00000000L, 0x7e21fff0000L
};
static final long[] jjbitVec62 = {
   0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec63 = {
   0x10000000000006L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec64 = {
   0x3L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec65 = {
   0x0L, 0x800000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec66 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec67 = {
   0x18000f0000ffffL, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec68 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 80;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(40); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(7, 10); }
                  else if (curChar == 39)
                     { jjAddStates(11, 13); }
                  else if (curChar == 46)
                     { jjCheckNAdd(4); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAddStates(14, 16); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAddStates(17, 23); }
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 46)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddStates(24, 26); }
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 39)
                     { jjAddStates(11, 13); }
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if (curChar == 39 && kind > 117)
                     kind = 117;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 11); }
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 24:
                  if (curChar == 34)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 25:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 34:
                  if (curChar == 34 && kind > 118)
                     kind = 118;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(27, 31); }
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(36); }
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(40); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(32, 34); }
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 8); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddTwoStates(49, 8); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 51:
                  if (curChar != 46)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddStates(35, 37); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddStates(35, 37); }
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(55); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddTwoStates(55, 8); }
                  break;
               case 56:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAddStates(14, 16); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAdd(59); }
                  break;
               case 60:
                  if (curChar != 48)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAddStates(17, 23); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 58); }
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(63, 58); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAdd(66); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(38, 39); }
                  break;
               case 69:
                  if (curChar == 46)
                     { jjCheckNAdd(70); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddTwoStates(73, 8); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 76:
                  if (curChar == 46)
                     { jjCheckNAdd(77); }
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(79); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAddTwoStates(79, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(40); }
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(43, 44); }
                  break;
               case 8:
                  if ((0x50L & l) != 0L && kind > 112)
                     kind = 112;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 12:
                  if (curChar == 92)
                     { jjAddStates(45, 47); }
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 18:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 26:
                  if (curChar == 92)
                     { jjAddStates(48, 50); }
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 28:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 33:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 40:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(40); }
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(55, 56); }
                  break;
               case 58:
                  if (curChar == 76 && kind > 107)
                     kind = 107;
                  break;
               case 61:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(62, 58); }
                  break;
               case 64:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAdd(65); }
                  break;
               case 67:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 70:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(57, 58); }
                  break;
               case 71:
                  if (curChar == 80)
                     { jjAddStates(59, 60); }
                  break;
               case 74:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(75); }
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 77:
                  if (curChar == 80)
                     { jjAddStates(61, 62); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(40); }
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(7, 10); }
                  break;
               case 40:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(40); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 80 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   42, 43, 8, 46, 47, 50, 51, 25, 26, 33, 34, 10, 12, 23, 57, 58, 
   59, 61, 63, 58, 64, 66, 67, 74, 4, 5, 8, 25, 26, 36, 33, 34, 
   42, 43, 8, 52, 53, 8, 68, 69, 75, 76, 77, 6, 7, 13, 14, 16, 
   27, 35, 37, 44, 45, 48, 49, 54, 55, 70, 71, 72, 73, 78, 79, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 216:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec42[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 216:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 220:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 221:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec68[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\151\156", "\151\146", "\144\157", 
"\146\157\162", "\164\162\171", "\156\145\167", "\160\141\163\163", "\145\156\165\155", 
"\145\154\151\146", "\143\141\163\145", "\145\154\163\145", "\164\162\165\145", 
"\156\165\154\154", "\164\150\151\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\143\157\156\163\164", "\163\165\160\145\162", "\167\150\151\154\145", "\143\141\164\143\150", 
"\142\162\145\141\153", "\164\150\162\157\167", "\143\154\141\163\163", "\151\155\160\157\162\164", 
"\163\164\141\164\151\143", "\160\165\142\154\151\143", "\156\141\164\151\166\145", 
"\145\170\160\157\162\164", "\163\167\151\164\143\150", "\162\145\164\165\162\156", 
"\141\163\163\145\162\164", "\146\151\156\141\154\154\171", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\145\170\164\145\156\144\163", "\144\145\146\141\165\154\164", 
"\141\142\163\164\162\141\143\164", "\162\145\141\144\154\157\143\153", "\151\156\164\145\162\156\141\154", 
"\143\157\156\164\151\156\165\145", "\167\162\151\164\145\154\157\143\153", 
"\160\162\157\164\145\143\164\145\144", "\151\156\164\145\162\146\141\143\145", 
"\151\156\163\164\141\156\143\145\157\146", "\151\155\160\154\145\155\145\156\164\163", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", 
"\75", "\52", "\57", "\46", "\174", "\136", "\45", "\74", "\76", "\176", "\77", 
"\72", "\53", "\55", "\75\75", "\74\75", "\76\75", "\41\75", "\157\162", "\53\53", 
"\55\55", "\74\74", "\76\76", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", 
"\174\75", "\136\75", "\45\75", "\56\56\56", "\141\156\144", "\156\157\164", "\74\74\75", 
"\76\76\75", "\166\157\151\144", "\143\150\141\162", "\142\171\164\145", 
"\163\150\157\162\164", "\151\156\164", "\154\157\156\147", "\146\154\157\141\164", 
"\146\151\170\145\144", "\144\157\165\142\154\145", "\142\157\157\154\145\141\156", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\32", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public BeagleParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public BeagleParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 80; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x4e11fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[80];
    private final int[] jjstateSet = new int[2 * 80];

    
    protected char curChar;
}
